{"meta":{"version":1,"warehouse":"1.0.2"},"models":{"Asset":[{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","path":"vendors/velocity/velocity.ui.min.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","path":"vendors/velocity/velocity.ui.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","path":"vendors/velocity/velocity.min.js","modified":0},{"_id":"themes/next/source/vendors/velocity/velocity.js","path":"vendors/velocity/velocity.js","modified":0},{"_id":"themes/next/source/vendors/velocity/bower.json","path":"vendors/velocity/bower.json","modified":0},{"_id":"themes/next/source/vendors/jquery/index.js","path":"vendors/jquery/index.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/sprite.psd","path":"vendors/fancybox/sprite.psd","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","path":"vendors/fancybox/source/jquery.fancybox.pack.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","path":"vendors/fancybox/source/jquery.fancybox.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","path":"vendors/fancybox/source/jquery.fancybox.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","path":"vendors/fancybox/source/helpers/fancybox_buttons.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","path":"vendors/fancybox/source/fancybox_sprite@2x.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","path":"vendors/fancybox/source/fancybox_sprite.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","path":"vendors/fancybox/source/fancybox_overlay.png","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","path":"vendors/fancybox/source/fancybox_loading@2x.gif","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","path":"vendors/fancybox/source/fancybox_loading.gif","modified":0},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","path":"vendors/fancybox/source/blank.gif","modified":0},{"_id":"themes/next/source/vendors/fancybox/lib/jquery.mousewheel-3.0.6.pack.js","path":"vendors/fancybox/lib/jquery.mousewheel-3.0.6.pack.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/lib/jquery-1.9.0.min.js","path":"vendors/fancybox/lib/jquery-1.9.0.min.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/lib/jquery-1.10.1.min.js","path":"vendors/fancybox/lib/jquery-1.10.1.min.js","modified":0},{"_id":"themes/next/source/vendors/fancybox/demo/index.html","path":"vendors/fancybox/demo/index.html","modified":0},{"_id":"themes/next/source/vendors/fancybox/demo/iframe.html","path":"vendors/fancybox/demo/iframe.html","modified":0},{"_id":"themes/next/source/vendors/fancybox/demo/ajax.txt","path":"vendors/fancybox/demo/ajax.txt","modified":0},{"_id":"themes/next/source/vendors/fancybox/demo/5_s.jpg","path":"vendors/fancybox/demo/5_s.jpg","modified":0},{"_id":"themes/next/source/vendors/fancybox/demo/5_b.jpg","path":"vendors/fancybox/demo/5_b.jpg","modified":0},{"_id":"themes/next/source/vendors/fancybox/demo/4_s.jpg","path":"vendors/fancybox/demo/4_s.jpg","modified":0},{"_id":"themes/next/source/vendors/fancybox/demo/4_b.jpg","path":"vendors/fancybox/demo/4_b.jpg","modified":0},{"_id":"themes/next/source/vendors/fancybox/demo/3_s.jpg","path":"vendors/fancybox/demo/3_s.jpg","modified":0},{"_id":"themes/next/source/vendors/fancybox/demo/3_b.jpg","path":"vendors/fancybox/demo/3_b.jpg","modified":0},{"_id":"themes/next/source/vendors/fancybox/demo/2_s.jpg","path":"vendors/fancybox/demo/2_s.jpg","modified":0},{"_id":"themes/next/source/vendors/fancybox/demo/2_b.jpg","path":"vendors/fancybox/demo/2_b.jpg","modified":0},{"_id":"themes/next/source/vendors/fancybox/demo/1_s.jpg","path":"vendors/fancybox/demo/1_s.jpg","modified":0},{"_id":"themes/next/source/vendors/fancybox/demo/1_b.jpg","path":"vendors/fancybox/demo/1_b.jpg","modified":0},{"_id":"themes/next/source/vendors/fancybox/README.md","path":"vendors/fancybox/README.md","modified":0},{"_id":"themes/next/source/vendors/fancybox/CHANGELOG.md","path":"vendors/fancybox/CHANGELOG.md","modified":0},{"_id":"themes/next/source/js/motion_global.js","path":"js/motion_global.js","modified":0},{"_id":"themes/next/source/js/motion_fallback.js","path":"js/motion_fallback.js","modified":0},{"_id":"themes/next/source/js/helpers.js","path":"js/helpers.js","modified":0},{"_id":"themes/next/source/js/fancy-box.js","path":"js/fancy-box.js","modified":0},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","path":"js/bootstrap.scrollspy.js","modified":0},{"_id":"themes/next/source/js/analytics_google-analytics.js","path":"js/analytics_google-analytics.js","modified":0},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0},{"_id":"themes/next/source/images/bkdefault_avatar.jpg","path":"images/bkdefault_avatar.jpg","modified":0},{"_id":"themes/next/source/fonts/lato/Lato-Regular.woff","path":"fonts/lato/Lato-Regular.woff","modified":0},{"_id":"themes/next/source/fonts/lato/Lato-Regular.ttf","path":"fonts/lato/Lato-Regular.ttf","modified":0},{"_id":"themes/next/source/fonts/lato/Lato-Regular.eot","path":"fonts/lato/Lato-Regular.eot","modified":0},{"_id":"themes/next/source/fonts/lato/Lato-Italic.woff","path":"fonts/lato/Lato-Italic.woff","modified":0},{"_id":"themes/next/source/fonts/lato/Lato-Italic.ttf","path":"fonts/lato/Lato-Italic.ttf","modified":0},{"_id":"themes/next/source/fonts/lato/Lato-Italic.eot","path":"fonts/lato/Lato-Italic.eot","modified":0},{"_id":"themes/next/source/fonts/lato/Lato-BoldItalic.woff","path":"fonts/lato/Lato-BoldItalic.woff","modified":0},{"_id":"themes/next/source/fonts/lato/Lato-BoldItalic.ttf","path":"fonts/lato/Lato-BoldItalic.ttf","modified":0},{"_id":"themes/next/source/fonts/lato/Lato-BoldItalic.eot","path":"fonts/lato/Lato-BoldItalic.eot","modified":0},{"_id":"themes/next/source/fonts/lato/Lato-Bold.woff","path":"fonts/lato/Lato-Bold.woff","modified":0},{"_id":"themes/next/source/fonts/lato/Lato-Bold.ttf","path":"fonts/lato/Lato-Bold.ttf","modified":0},{"_id":"themes/next/source/fonts/lato/Lato-Bold.eot","path":"fonts/lato/Lato-Bold.eot","modified":0},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.woff","path":"fonts/icon-linecons/icomoon.woff","modified":0},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.ttf","path":"fonts/icon-linecons/icomoon.ttf","modified":0},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.svg","path":"fonts/icon-linecons/icomoon.svg","modified":0},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.eot","path":"fonts/icon-linecons/icomoon.eot","modified":0},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.woff","path":"fonts/icon-icomoon/icomoon.woff","modified":0},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.ttf","path":"fonts/icon-icomoon/icomoon.ttf","modified":0},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.svg","path":"fonts/icon-icomoon/icomoon.svg","modified":0},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.eot","path":"fonts/icon-icomoon/icomoon.eot","modified":0},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.woff","path":"fonts/icon-fifty-shades/icomoon.woff","modified":0},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.ttf","path":"fonts/icon-fifty-shades/icomoon.ttf","modified":0},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.svg","path":"fonts/icon-fifty-shades/icomoon.svg","modified":0},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.eot","path":"fonts/icon-fifty-shades/icomoon.eot","modified":0},{"_id":"themes/next/source/fonts/icon-feather/icomoon.woff","path":"fonts/icon-feather/icomoon.woff","modified":0},{"_id":"themes/next/source/fonts/icon-feather/icomoon.ttf","path":"fonts/icon-feather/icomoon.ttf","modified":0},{"_id":"themes/next/source/fonts/icon-feather/icomoon.svg","path":"fonts/icon-feather/icomoon.svg","modified":0},{"_id":"themes/next/source/fonts/icon-feather/icomoon.eot","path":"fonts/icon-feather/icomoon.eot","modified":0},{"_id":"themes/next/source/fonts/icon-default/icomoon.woff","path":"fonts/icon-default/icomoon.woff","modified":0},{"_id":"themes/next/source/fonts/icon-default/icomoon.ttf","path":"fonts/icon-default/icomoon.ttf","modified":0},{"_id":"themes/next/source/fonts/icon-default/icomoon.svg","path":"fonts/icon-default/icomoon.svg","modified":0},{"_id":"themes/next/source/fonts/icon-default/icomoon.eot","path":"fonts/icon-default/icomoon.eot","modified":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0},{"_id":"source/media/file/20140315/2.jpg","path":"media/file/20140315/2.jpg","modified":0},{"_id":"source/media/file/20140504/process.jpg","path":"media/file/20140504/process.jpg","modified":0},{"_id":"source/media/file/20140315/1.jpg","path":"media/file/20140315/1.jpg","modified":0},{"_id":"source/media/file/20140504/result.jpg","path":"media/file/20140504/result.jpg","modified":0},{"_id":"source/media/file/20140315/3.jpg","path":"media/file/20140315/3.jpg","modified":0},{"_id":"source/media/1442160050001.png","path":"media/1442160050001.png","modified":1},{"_id":"source/media/1442162089697.png","path":"media/1442162089697.png","modified":1},{"_id":"source/media/1442161266216.png","path":"media/1442161266216.png","modified":1},{"_id":"source/media/1442160889138.png","path":"media/1442160889138.png","modified":1},{"_id":"source/media/1442160401385.png","path":"media/1442160401385.png","modified":1}],"Cache":[{"_id":"source/_posts/2014-03-14-print-from-one-to-n-bit.md","shasum":"b2b93666c84d38298324f966a74cb6071104cbe1","modified":1433857866000},{"_id":"source/_posts/2014-03-13-first-blog.markdown~","shasum":"bbbf4374d611ecca0d0b94d9d420db16b45ec8dc","modified":1433850708000},{"_id":"source/_posts/2014-03-13-first-blog.markdown","shasum":"2e69391c6abc462ab5ed9d106058780e58ab89f4","modified":1433857809000},{"_id":"source/_posts/2014-03-14-print-from-one-to-n-bit.md~","shasum":"d08daa28184e35ae1f08725330cb017aa28bc591","modified":1433850708000},{"_id":"source/_posts/2014-03-14-single-linked-list-problems.md","shasum":"b80f5079e03989f217b3548d3d07b54d5385f304","modified":1433857876000},{"_id":"source/_posts/2014-03-15-shared-folders-in-ubuntu-windows8.md","shasum":"1cb48c1a668eda846fab48e25f4749947bd8481d","modified":1433857884000},{"_id":"source/_posts/2014-03-15-shared-folders-in-ubuntu-windows8.md~","shasum":"41beb494e3080bf82933d1414f9cba53592d9ab5","modified":1433850708000},{"_id":"source/_posts/2014-05-04-variable-byte-code-with-perl.md","shasum":"35c0260b054ce05337752135a8174d52dca07fef","modified":1433857902000},{"_id":"source/_posts/2014-03-14-single-linked-list-problems.md~","shasum":"1862eda2185c28c2c91d5b8f64fa6486e4f54c5c","modified":1433850708000},{"_id":"source/_posts/2014-05-04-variable-byte-code-with-perl.md~","shasum":"6629d8fc1ddab3af9089633ea551ac769ab66824","modified":1433850708000},{"_id":"source/_posts/2014-05-09-valid-input-with-shell.md","shasum":"2504f91d96fc94a95986f3534b3c314650761ef0","modified":1433857914000},{"_id":"source/_posts/2014-05-09-valid-input-with-shell.md~","shasum":"0066ea97198997eea573c747063e9d7d3aaad9a0","modified":1433850708000},{"_id":"source/_posts/2015-06-07-ios-saving-loading-local-data.md","shasum":"04697b3bde66c67b74ad88c2524b7eb9f92b63cd","modified":1433859392000},{"_id":"source/_posts/2015-06-02-ios-url-json.md","shasum":"ba6e7ece3b179f8ee0daa101f516c5f94e19ff68","modified":1433857944000},{"_id":"themes/next/source/css/_page/home.styl","shasum":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1433849455000},{"_id":"themes/next/_config.yml","shasum":"7ad2327dcceaec8a69061b395f2734e3d892d525","modified":1433859520000},{"_id":"themes/next/README.en.md","shasum":"1771ed0b5e5dec42bd2c497d2c3e0861d464f030","modified":1433849455000},{"_id":"themes/next/bower.json","shasum":"1a681eeb5bff68be34e4e5226678c6cd3a7a12cc","modified":1433849455000},{"_id":"themes/next/README.md","shasum":"331d827b8b816901c73c9d34567701648241f710","modified":1433849455000},{"_id":"themes/next/languages/default.yml","shasum":"d0cad2843283dd2a62cb8d1a2ed182a368210aca","modified":1433849455000},{"_id":"themes/next/languages/fr-FR.yml","shasum":"9ee1011db6307df957684c83f39ac7499391924c","modified":1433849455000},{"_id":"themes/next/languages/ru.yml","shasum":"60cc1fb273adfd84137a207dd9d0d00f08605ccd","modified":1433849455000},{"_id":"themes/next/languages/de.yml","shasum":"784bea46de28a3113d7c91621740f521dae09dce","modified":1433849455000},{"_id":"themes/next/languages/zh-Hans.yml","shasum":"282620a222ea32c062610f4ed6af016f862ccdfa","modified":1433849455000},{"_id":"themes/next/languages/zh-tw.yml","shasum":"d34c5781a231978e66852784ad00c9895a7de022","modified":1433849455000},{"_id":"themes/next/languages/zh-hk.yml","shasum":"e58766e0af5abf0705ccca4a5fc86d1be03db198","modified":1433849455000},{"_id":"themes/next/layout/_layout.swig","shasum":"748538762c25cba24b75f29647b8471d287466de","modified":1433849455000},{"_id":"themes/next/layout/_macro/post-collapse.swig","shasum":"f557c443e7d5f76bb53482189eb1c90d09331a6f","modified":1433849455000},{"_id":"themes/next/layout/_macro/post.swig","shasum":"ec7ce11a34263664d89566c641e1bb65edffdfd3","modified":1433849455000},{"_id":"themes/next/layout/_partials/footer.swig","shasum":"91bdd4dc9ef6cf41732e4a87abb9f28be2714a2d","modified":1433849455000},{"_id":"themes/next/layout/_macro/sidebar.swig","shasum":"69ae650b056855d5bc11233a4305b99f28cd0f97","modified":1433849455000},{"_id":"themes/next/layout/_partials/header.swig","shasum":"607695fb0103b599f46b63ad892b8b706a692fd3","modified":1433849455000},{"_id":"themes/next/layout/_partials/head.swig","shasum":"38f7429e196d47469a6980aa1da00896e0a164de","modified":1433849455000},{"_id":"themes/next/layout/_scripts/analytics/baidu-analytics.swig","shasum":"7c43d66da93cde65b473a7d6db2a86f9a42647d6","modified":1433849455000},{"_id":"themes/next/layout/_partials/pagination.swig","shasum":"33d3d6c4417ea88e602dcb116b0604a1955dc5fe","modified":1433849455000},{"_id":"themes/next/layout/_scripts/bootstrap.scrollspy.swig","shasum":"d715c49d8d43bf25368cffbebf9d5668398bf39e","modified":1433849455000},{"_id":"themes/next/layout/_scripts/analytics/google-analytics.swig","shasum":"e5d1979d2a78fe51b385093a8c994e5ec10b3231","modified":1433849455000},{"_id":"themes/next/layout/_scripts/baidushare.swig","shasum":"d726361945437cf6e48067b3dd041b7e36e98d85","modified":1433849455000},{"_id":"themes/next/layout/_scripts/comments/disqus.swig","shasum":"07077278b45f10233ae9ac844a3bf01badbbca73","modified":1433849455000},{"_id":"themes/next/layout/_scripts/fancy-box.swig","shasum":"0f289b27ccab6a7ae5a3fb41893712afc6cb70b8","modified":1433849455000},{"_id":"themes/next/layout/_scripts/comments/duoshuo.swig","shasum":"c6dc1f0788ed8321c9a9bf963d0441068342b4d1","modified":1433849455000},{"_id":"themes/next/layout/_scripts/helpers.swig","shasum":"188fbb2d10f837c1f2878ecfc28a47f3ff3de079","modified":1433849455000},{"_id":"themes/next/layout/_scripts/mathjax.swig","shasum":"abc52fefb276c52cbb19de5c214521dfcf2a10fd","modified":1433849455000},{"_id":"themes/next/layout/_scripts/motion.swig","shasum":"86f2c9db3d30a86921b3bb266d660e8b0e14dfb3","modified":1433849455000},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","shasum":"7fcd57c9f5b64635f2bd4cc8ee7c98d36dceda7a","modified":1433849455000},{"_id":"themes/next/layout/index.swig","shasum":"493580984b5976c8029a4cc8c630a4b6dd48fcfc","modified":1433849455000},{"_id":"themes/next/layout/category.swig","shasum":"624d0a5c4f3e936b15539c35d6c06ba9338a4414","modified":1433849455000},{"_id":"themes/next/layout/archive.swig","shasum":"27d1cb4ff0bb05af0efa0caeeae6ff0d4d8a0a5f","modified":1433849455000},{"_id":"themes/next/layout/page.swig","shasum":"0b0924774a562ff45ed98e40c4e913df9a77fe08","modified":1433849455000},{"_id":"themes/next/source/css/_component/back-to-top.styl","shasum":"88cd66910260006aa8e9e795df4948d4b67bfa11","modified":1433849455000},{"_id":"themes/next/layout/post.swig","shasum":"55843930c1c09567479697d510ab3ebe14219710","modified":1433849455000},{"_id":"themes/next/layout/tag.swig","shasum":"f1dcfbc0eef76f1f6be29f31a343338d5bbfe814","modified":1433849455000},{"_id":"themes/next/source/css/_component/buttons.styl","shasum":"1fa59bcd92b82646f976a688dcaad527589316b5","modified":1433849455000},{"_id":"themes/next/source/css/_component/comments.styl","shasum":"54e73681ba6f57ef961138f94d2ee8ac845990c3","modified":1433849455000},{"_id":"themes/next/source/css/_component/duoshuo.styl","shasum":"b54d0c5a911303cb2fd4bfc84134811a502e5653","modified":1433849455000},{"_id":"themes/next/source/css/_component/gallery.styl","shasum":"fa6e23ebddb6f235803b51974f36be2a43b2c9c4","modified":1433849455000},{"_id":"themes/next/source/css/_component/pagination.styl","shasum":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1433849455000},{"_id":"themes/next/source/css/_component/posts-collapse.styl","shasum":"8f9e8f5f65956ccf1d52ff8526392803dff579d3","modified":1433849455000},{"_id":"themes/next/source/css/_component/posts-expand.styl","shasum":"4b82dbbb6e536e6e8ee3cec6e62c2fd4bea60a09","modified":1433849455000},{"_id":"themes/next/source/css/_component/tag-cloud.styl","shasum":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1433849455000},{"_id":"themes/next/source/css/_component/posts-type.styl","shasum":"40b593134bf96d1d6095b3439d47820659d7f10b","modified":1433849455000},{"_id":"themes/next/source/css/_core/base.styl","shasum":"ff75d9d6b2949588964bb62223ebe88d89127b96","modified":1433849455000},{"_id":"themes/next/source/css/_core/mixins.styl","shasum":"66985fe77bd323f7f8f634908e17166f51e96e95","modified":1433849455000},{"_id":"themes/next/source/css/_core/helpers.styl","shasum":"41a31d651b60b4f458fc56a1d191dfbbdcb6d794","modified":1433849455000},{"_id":"themes/next/source/css/_custom/custom.styl","shasum":"68b6859fb48fe8358e567fc324f218cecfc3a533","modified":1433849455000},{"_id":"themes/next/source/css/_core/tables.styl","shasum":"be6c1a04595cf38673511366a3d89fcdb046f533","modified":1433849455000},{"_id":"themes/next/source/css/_core/normalize.styl","shasum":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1433849455000},{"_id":"themes/next/source/css/_core/scaffolding.styl","shasum":"d776e241cf650b00ee1dd21b9ff377c250d9eeaa","modified":1433849455000},{"_id":"themes/next/source/css/_fonts/icon-feather.styl","shasum":"f49f8966496166bd62f79f75a3277d4d5b1102e8","modified":1433849455000},{"_id":"themes/next/source/css/_custom/variables.styl","shasum":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1433849455000},{"_id":"themes/next/source/css/_fonts/icon-default.styl","shasum":"86bd4135afa2589ad074e0cf8ebb054ff3d10f24","modified":1433849455000},{"_id":"themes/next/source/css/_fonts/icon-fifty-shades.styl","shasum":"90e68936ea0f26af93c2c517fe1b891538f9c1b1","modified":1433849455000},{"_id":"themes/next/source/css/_fonts/icon-font.styl","shasum":"6fd7caf8194656b90c3b7976295f157bce593b54","modified":1433849455000},{"_id":"themes/next/source/css/_fonts/icon-linecons.styl","shasum":"3874252c8392b5a18e849ac69b6d66999ec1de16","modified":1433849455000},{"_id":"themes/next/source/css/_fonts/lato.styl","shasum":"ba5b9109615203bb87937de24126ce50a7a2d8ce","modified":1433849455000},{"_id":"themes/next/source/css/_page/archive.styl","shasum":"dff879f55ca65fa79c07e9098719e53eeea7ac88","modified":1433849455000},{"_id":"themes/next/source/css/_page/categories.styl","shasum":"4f696a2eaeee2f214adcf273eab25c62a398077a","modified":1433849455000},{"_id":"themes/next/source/css/_mist.styl","shasum":"67d972efa2ed8e23a37fc047538f419dbb63bcba","modified":1433849455000},{"_id":"themes/next/source/css/_page/post-detail.styl","shasum":"73796f6f13caa7151a2ee8e55755627e0d189f55","modified":1433849455000},{"_id":"themes/next/source/css/_section/footer.styl","shasum":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1433849455000},{"_id":"themes/next/source/css/_section/body.styl","shasum":"ca1a4766cbe25baac757c6b47a4858d221afdc40","modified":1433849455000},{"_id":"themes/next/source/css/_section/header.styl","shasum":"2d5e990b85eaf85558ed5ebaccb9eeedf4e078f3","modified":1433849455000},{"_id":"themes/next/source/css/_section/layout.styl","shasum":"57ed294f100d94ebc05f48145e5060a78edb405f","modified":1433849455000},{"_id":"themes/next/source/css/_section/media.styl","shasum":"fa9809d2ecc753cf32f70803c1d0821c405211f4","modified":1433849455000},{"_id":"themes/next/source/css/_section/sidebar.styl","shasum":"0fba5556e46a9f85d5dc270e6b17c0669e8cbdca","modified":1433849455000},{"_id":"themes/next/source/css/_variables/mist.styl","shasum":"f5dda1ca48c1b73a0bd34e08413de57699f24083","modified":1433849455000},{"_id":"themes/next/source/css/_vendor/highlight/highlight.styl","shasum":"42cad9d6ae956ff0d545b601916dcdee68d85ee5","modified":1433849455000},{"_id":"themes/next/source/css/_variables/base.styl","shasum":"111bc3d0e3de648fa8637e98d346554c4c23a29b","modified":1433849455000},{"_id":"themes/next/source/css/_vendor/highlight/theme.styl","shasum":"9f0606d4d94ffa6bd77f91628507bba19133cf36","modified":1433849455000},{"_id":"themes/next/source/css/main.styl","shasum":"85314cf23eaced014d750d9153c96322b3934d7d","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-default/icomoon.eot","shasum":"a58d5e893c6faefc90d5c2589cc314dff8ffca7a","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-default/icomoon.svg","shasum":"4f18f0bb815b1aeba57739069c3416106240b7c1","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-default/icomoon.ttf","shasum":"e6452f07b050ee0ff265b3b99a1e7ef82eb561b2","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-default/icomoon.woff","shasum":"4d0adc55240f331c6de225e23afd76ea5318da9c","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.eot","shasum":"6d0eb1a5bfef4f2bf77089bd090e88c5b2f7944d","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.svg","shasum":"690836f81c0feb1a49e2253d4f984ad543414986","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.woff","shasum":"9159eea8641b840e0f7aa6e087dae414044ecdd3","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-feather/icomoon.ttf","shasum":"8c865cffa3845be32406737fcc0466cf9cd965b3","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.eot","shasum":"f27c3643af6ed6f3d29a0be0c8dbea9b157857db","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.woff","shasum":"088a16303b0700e1c9e2c6962240b4c2f0fc3aa4","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.ttf","shasum":"e0b5e4a23a949bac499908bcef2fae56430e230e","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.eot","shasum":"301fcf00c24750dddf1c529f944ca62c7f1a217d","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-fifty-shades/icomoon.svg","shasum":"f0790da03008b6cb3ae4215cbb656cb4b4599633","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.ttf","shasum":"f399713d1c9400d4d3373e38991a7e362a754a94","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.woff","shasum":"05f1ec0bd307da5e731a86eb4961589a6042aebb","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-icomoon/icomoon.svg","shasum":"e316347805eb93425faa678611c5e42a7152da8f","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.eot","shasum":"176695cc0dc12daba049b2bb889397a7bf2e553c","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.ttf","shasum":"c8ec218adabc788b17f976f60dd1c5fa872d9fc4","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.woff","shasum":"d1ed08a17670fa259df02c1d52dc9ce754343775","modified":1433849455000},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1433849455000},{"_id":"themes/next/source/images/bkdefault_avatar.jpg","shasum":"b687bb4bfbe35a32b592c24d652ba80cfdc770fc","modified":1433849455000},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1433849455000},{"_id":"themes/next/source/images/cc-by-nc.svg","shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1433849455000},{"_id":"themes/next/source/images/cc-by-nd.svg","shasum":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1433849455000},{"_id":"themes/next/source/images/cc-by.svg","shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1433849455000},{"_id":"themes/next/source/images/cc-by-sa.svg","shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1433849455000},{"_id":"themes/next/source/images/cc-zero.svg","shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1433849455000},{"_id":"themes/next/source/images/searchicon.png","shasum":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1433849455000},{"_id":"themes/next/source/js/analytics_google-analytics.js","shasum":"f60bcf719bb55280a219c81d8ae50433aa28cf1a","modified":1433849455000},{"_id":"themes/next/source/js/motion_fallback.js","shasum":"a767d522c65a8b2fbad49135c9332135c6785c3e","modified":1433849455000},{"_id":"themes/next/source/js/fancy-box.js","shasum":"18b0ff55461d091b515a1b9e5f843fd2a7516c34","modified":1433849455000},{"_id":"themes/next/source/js/bootstrap.scrollspy.js","shasum":"ae7bdce88b515aade4eea8bf7407eec458bcd625","modified":1433849455000},{"_id":"themes/next/source/js/helpers.js","shasum":"c2117b0ec653df4c45dd9d9575b190cbe1035335","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/CHANGELOG.md","shasum":"a2141f95381a25e0a8d866f4c40c33c58c1c95a1","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/README.md","shasum":"e3d6c1f773a7731f9af229dd2c951f0bb58b35ac","modified":1433849455000},{"_id":"themes/next/source/js/motion_global.js","shasum":"732f0fa7eb6e35b69ac02ab277b0d14685beced5","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/demo/1_s.jpg","shasum":"7331d8f057362dd1010309893d81d9fdb5519d30","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/demo/2_s.jpg","shasum":"8d895d7597c81d513e02090da4d646d1b6946e14","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/demo/2_b.jpg","shasum":"d374396009087680112482ffcfaef4a3e85838a1","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/demo/3_s.jpg","shasum":"335e622f0253ab09cbf3fd6577a629367aa9ad47","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/demo/3_b.jpg","shasum":"08059c8d631ee0c1429e81e61ee15f899ee1471f","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/demo/4_s.jpg","shasum":"f7ecbbd24aa0fde9fe70b86d2148f753229cb6ed","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/demo/5_s.jpg","shasum":"a0517fde348e6539420b3c4a6c80551d76730c2b","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/demo/iframe.html","shasum":"b3480accf98d43e760acef24b5856201e9e902c8","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/demo/ajax.txt","shasum":"6ee706bd746d881ab86e7cb24117f9d6832f8101","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/demo/index.html","shasum":"cd1f8eae2b24fa1d577737af099933f86f34e3df","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/lib/jquery.mousewheel-3.0.6.pack.js","shasum":"1e1b44eb7cfade680c52d8748846425ecd809bfd","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/source/blank.gif","shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading.gif","shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_overlay.png","shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_loading@2x.gif","shasum":"273b123496a42ba45c3416adb027cd99745058b0","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite.png","shasum":"17df19f97628e77be09c352bf27425faea248251","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/source/fancybox_sprite@2x.png","shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/fancybox_buttons.png","shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-media.js","shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","shasum":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.css","shasum":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.pack.js","shasum":"53360764b429c212f424399384417ccc233bb3be","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/source/jquery.fancybox.js","shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1433849455000},{"_id":"themes/next/source/vendors/velocity/bower.json","shasum":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1433849455000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.js","shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1433849455000},{"_id":"themes/next/source/vendors/velocity/velocity.ui.min.js","shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1433849455000},{"_id":"themes/next/source/fonts/icon-linecons/icomoon.svg","shasum":"888a285a4a7329210b2210742c673611c27425eb","modified":1433849455000},{"_id":"themes/next/source/vendors/velocity/velocity.min.js","shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/demo/1_b.jpg","shasum":"f7953162f526e3fc1f37602b0aca0f544d96b095","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/demo/4_b.jpg","shasum":"9855aed7b58d5662229427c946801460f5664ffd","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/demo/5_b.jpg","shasum":"d6fdf06b8058a0ff5ce339313996b9ef220431bc","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/lib/jquery-1.9.0.min.js","shasum":"002da8cbe90fcf32fbdebb72386125079e3805ee","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/lib/jquery-1.10.1.min.js","shasum":"161b78ec52f28657a835e4a5423f03782fd35806","modified":1433849455000},{"_id":"themes/next/source/vendors/jquery/index.js","shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1433849455000},{"_id":"themes/next/source/vendors/fancybox/sprite.psd","shasum":"2669feac27b2d221bdb133acecf0a39f50d9ec27","modified":1433849455000},{"_id":"themes/next/source/vendors/velocity/velocity.js","shasum":"e63dc7cea055ca60a95d286f32349d88b10c5a4d","modified":1433849455000},{"_id":"themes/next/source/fonts/lato/Lato-Bold.eot","shasum":"75418bc99e564f8a5c85065d320a2a4c89bc125b","modified":1433849455000},{"_id":"themes/next/source/fonts/lato/Lato-BoldItalic.eot","shasum":"b213c3c3cf416c311e3f1f0c3718da5d4fe01e91","modified":1433849455000},{"_id":"themes/next/source/fonts/lato/Lato-Italic.eot","shasum":"d8d6965243a228572555233c4c16a530d607688e","modified":1433849455000},{"_id":"themes/next/source/fonts/lato/Lato-Regular.eot","shasum":"9414d25ab488458c2e9d2b091b7a348f54f46c49","modified":1433849455000},{"_id":"themes/next/source/fonts/lato/Lato-Regular.woff","shasum":"076694a148237be508af30ea717c9d48851b5f0e","modified":1433849455000},{"_id":"themes/next/source/fonts/lato/Lato-Bold.woff","shasum":"f3fcdf98e2147bce10d719a51abade970fcc5641","modified":1433849455000},{"_id":"themes/next/source/fonts/lato/Lato-BoldItalic.woff","shasum":"692ae52f109ebe25b0f0a327f9e84b636ea7b00c","modified":1433849455000},{"_id":"themes/next/source/fonts/lato/Lato-Italic.woff","shasum":"48bb1fd23085cbc82b1d55af49a3c60a4bd8917a","modified":1433849455000},{"_id":"themes/next/source/fonts/lato/Lato-Bold.ttf","shasum":"e0de32d86265939f1144116ad0ac5ab9220244c4","modified":1433849455000},{"_id":"themes/next/source/fonts/lato/Lato-Italic.ttf","shasum":"453d1375835f196375be5e9b18e4830b5200a7ed","modified":1433849455000},{"_id":"themes/next/source/fonts/lato/Lato-Regular.ttf","shasum":"50437629c3570cd7f19f1adf78aa712b9b437f35","modified":1433849455000},{"_id":"themes/next/source/fonts/lato/Lato-BoldItalic.ttf","shasum":"ce4f48583e268f7d0bb83e37bbc6cb2cb11c61ba","modified":1433849455000},{"_id":"source/favicon.ico","shasum":"4f6fbc8126779d68897dae096ec350e10a3b6ced","modified":1432868799000},{"_id":"public/2015/06/09/2014-03-13-first-blog/index.html","modified":1433856559581,"shasum":"4f4f20494a8544dc7963769642e6da2c76dd25f3"},{"_id":"public/2015/06/09/2015-06-07-ios-saving-loading-local-data/index.html","modified":1433856559645,"shasum":"fde7040dc111b53e0189cb27db9025a29721f4a5"},{"_id":"public/2015/06/09/2015-06-02-ios-url-json/index.html","modified":1433856559684,"shasum":"e705d3e3e6ee0345651718a1fe39ab782536fcec"},{"_id":"public/2015/06/09/2014-05-09-valid-input-with-shell/index.html","modified":1433856559734,"shasum":"a2b6e73ff984097e85523fe5fd464c6e4c983a12"},{"_id":"public/2015/06/09/2014-05-04-variable-byte-code-with-perl/index.html","modified":1433856559776,"shasum":"f9394a40b7eb71170b9f928121a73c1c23dc86b1"},{"_id":"public/2015/06/09/2014-03-15-shared-folders-in-ubuntu-windows8/index.html","modified":1433856559815,"shasum":"c1160eaaf2c5bdd9849a87bf7cfde9895b0037d3"},{"_id":"public/2015/06/09/2014-03-14-single-linked-list-problems/index.html","modified":1433856559856,"shasum":"24a4df7538340ec6ee1af524f74c931e67819b84"},{"_id":"public/2014/03/14/2014-03-14-print-from-one-to-n-bit/index.html","modified":1442163082508,"shasum":"22980614368ad6fa9343656a2372a47c12730ce7"},{"_id":"public/archives/index.html","modified":1442163082646,"shasum":"d1718fcf5d3b749f3c27fa8199cba0405b5fb5d9"},{"_id":"public/archives/2014/index.html","modified":1442163082693,"shasum":"1ed16219c1d8ca1d1086fb9de74a46bbca666535"},{"_id":"public/archives/2014/03/index.html","modified":1442163082733,"shasum":"e807f73eb735bda792fdcd03f56fcac5ef9d9b66"},{"_id":"public/archives/2015/index.html","modified":1442163082808,"shasum":"db0277102b86f1341ed4ae6efd7b8ad26fbaf299"},{"_id":"public/archives/2015/06/index.html","modified":1442163082842,"shasum":"feea72b38721c8c380d7cc65c81f4de696f819fe"},{"_id":"public/index.html","modified":1442163739237,"shasum":"84777662ae1d3065b4c0b0785f7b092ea5e7099f"},{"_id":"public/tags/github/index.html","modified":1442163082962,"shasum":"390909a629e0ec63bff0f57da3f4ed12df0068cb"},{"_id":"public/tags/pages/index.html","modified":1442163083011,"shasum":"beccf966c55c0ea72d1cf2dcbdb54d6ad60bed62"},{"_id":"public/tags/life/index.html","modified":1442163083048,"shasum":"2f8e838a880fe174aa94d7af8c7cd93dd1eb88eb"},{"_id":"public/tags/iOS入门/index.html","modified":1442163083092,"shasum":"f5e585f0e2863e0ae0df228c5ff55e9eaa9c80bc"},{"_id":"public/tags/NSCoding/index.html","modified":1442163083128,"shasum":"4effc7c5c8ec679582eb5cd5add15b7ca4d5a6bf"},{"_id":"public/tags/应用状态/index.html","modified":1442163083172,"shasum":"a3fc6d39ea8714faf493e3871c0836fdd5b88d49"},{"_id":"public/tags/Object-C/index.html","modified":1442163083217,"shasum":"e32b896ee90e149a21abef07c322327e811dd13d"},{"_id":"public/tags/webView/index.html","modified":1442163083251,"shasum":"97457eb50cb7008e4d999d342bf0bbf769403371"},{"_id":"public/tags/输入验证/index.html","modified":1442163083292,"shasum":"4af49260d9a0b08c1160e0490868225236ce8599"},{"_id":"public/tags/Shell/index.html","modified":1442163083338,"shasum":"bece59eb87a581b572dc0ed93b531765430310e9"},{"_id":"public/tags/Wicked-Cool-Shell-Scripts/index.html","modified":1442163083379,"shasum":"b3f5778d2104e23c03269b6d41524a86577f7798"},{"_id":"public/tags/可变字节码/index.html","modified":1442163083434,"shasum":"3a39a5fdecd8d73e35f8416c57a581802da15ec1"},{"_id":"public/tags/Variable-Byte-Code/index.html","modified":1442163083469,"shasum":"f943de0976e27c23c0b507104d156b81003baab6"},{"_id":"public/tags/Perl/index.html","modified":1442163083495,"shasum":"59cfa61030ef0d35c6185b81c6b4c57e44c13596"},{"_id":"public/tags/压缩/index.html","modified":1442163083524,"shasum":"9ae98ce04bd0072288d51fd66aa66a705112cf45"},{"_id":"public/tags/算法/index.html","modified":1442163083555,"shasum":"d00c5159bea01e36546426d13fc0714510428ecc"},{"_id":"public/tags/ubuntu/index.html","modified":1442163083582,"shasum":"38b3d0fda394e28498a823099a2cc02db56c6b4f"},{"_id":"public/tags/vmware/index.html","modified":1442163083603,"shasum":"bff018acc88d022f2b6e097058b8cd8517d7c69c"},{"_id":"public/tags/tech/index.html","modified":1442163083645,"shasum":"99d0c4f203091391f0fe28a8a5526ef3211bcb58"},{"_id":"public/tags/数据结构/index.html","modified":1442163083669,"shasum":"c746ad9a91cbb2ebd70643b85625c0bbf357f4b4"},{"_id":"public/tags/C/index.html","modified":1442163083690,"shasum":"5721af3ae2bbedde9112d58364400834cef8f7f4"},{"_id":"source/tags/index.md","shasum":"ab3ec82e2d2bfc04e916445631b8b0be52e644ad","modified":1433857623000},{"_id":"public/tags/index.html","modified":1442163082161,"shasum":"24f8a2d2d9dc03aff5e23664d9f282217c802e20"},{"_id":"public/2015/06/07/2015-06-07-ios-saving-loading-local-data/index.html","modified":1442163082291,"shasum":"d993fc78c45fc3dd2d9578ac364320a7cb0b7ae9"},{"_id":"public/2015/06/02/2015-06-02-ios-url-json/index.html","modified":1442163082332,"shasum":"56a981df93ad2b0d1b5829678800b7a16b97bfbf"},{"_id":"public/2014/05/09/2014-05-09-valid-input-with-shell/index.html","modified":1442163082382,"shasum":"cdeaaab9a0a597e2f2fd10e0982596cdbf24f9a1"},{"_id":"public/2014/05/04/2014-05-04-variable-byte-code-with-perl/index.html","modified":1442163082418,"shasum":"e2b96fd310d9ceb06acf49a70f7a40331aa0155f"},{"_id":"public/2014/03/15/2014-03-15-shared-folders-in-ubuntu-windows8/index.html","modified":1442163082459,"shasum":"69f7e00d313aede16d508c7eae09403970113374"},{"_id":"public/2014/03/14/2014-03-14-single-linked-list-problems/index.html","modified":1442163082548,"shasum":"0eb8a2507d0a3de248042458c0038781bbc8d2f3"},{"_id":"public/2014/03/13/2014-03-13-first-blog/index.html","modified":1442163082593,"shasum":"6616cffdccb794a0962aa5bbf1a72cb53c0c8a6b"},{"_id":"public/archives/2014/05/index.html","modified":1442163082770,"shasum":"be0b104f58e7d05c67f3387ddae43243ad9e6079"},{"_id":"source/media/file/20140315/2.jpg","shasum":"7895085d1c19640db1fe977f303486249e4efa8c","modified":1432868799000},{"_id":"source/media/file/20140315/3.jpg","shasum":"ce6d4f74c3b9d8332d04102d96de6c20e9621e5e","modified":1432868799000},{"_id":"source/media/file/20140504/result.jpg","shasum":"23e2c03dd3f4008fe522cd841c1b615a90b986f9","modified":1432868799000},{"_id":"source/media/file/20140315/1.jpg","shasum":"5dd2048d3214a3e2690d2b175ff804f52b010a0b","modified":1432868799000},{"_id":"source/media/file/20140504/process.jpg","shasum":"4b3eb098b140535d6f90c52e51a70c7288252b28","modified":1432868799000},{"_id":"source/_posts/ios 图片的旋转动画效果.md","shasum":"a493bbeb9d4a6ee8957da984bc3d4d865357bd70","modified":1442167421000},{"_id":"public/1442160050001.png","modified":1442163082068,"shasum":"e265ae57cbe1aa5fe4a5e3de3016c29bd3cc4ece"},{"_id":"public/1442162089697.png","modified":1442163082076,"shasum":"522932b66bedde151a8c99cabaf4c0680b139683"},{"_id":"public/1442161266216.png","modified":1442163082079,"shasum":"db14a60181a79c937b7a3153f47bb98a1d342696"},{"_id":"public/1442160889138.png","modified":1442163082081,"shasum":"edf5d64d1219f6e0ed73d3e3a29a17e6e12db48c"},{"_id":"public/1442160401385.png","modified":1442163082083,"shasum":"afa20e69ae386a2fb867c7a57c178fdf7738efdd"},{"_id":"public/2015/09/14/ios 图片的旋转动画效果/index.html","modified":1442167432715,"shasum":"bff8e8aeb8aa9f79bac4a223b071293c9287177a"},{"_id":"public/archives/2015/09/index.html","modified":1442163082872,"shasum":"37cacaaf7deb52ea00463ca99df83c623946bb07"},{"_id":"public/tags/CGAffineTransform/index.html","modified":1442163083721,"shasum":"04fc578aac05831f9707869cdfa8e1baa90f09d8"},{"_id":"public/tags/anchorPoint/index.html","modified":1442163083750,"shasum":"f305f17df959c3bfc50d8b464d81b4e66186ef9b"},{"_id":"public/vendors/velocity/velocity.ui.min.js","modified":1442166513305,"shasum":"ed5e534cd680a25d8d14429af824f38a2c7d9908"},{"_id":"public/vendors/velocity/velocity.ui.js","modified":1442166513309,"shasum":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df"},{"_id":"public/vendors/velocity/velocity.min.js","modified":1442166513311,"shasum":"2f1afadc12e4cf59ef3b405308d21baa97e739c6"},{"_id":"public/vendors/velocity/velocity.js","modified":1442166513313,"shasum":"9f08181baea0cc0e906703b7e5df9111b9ef3373"},{"_id":"public/vendors/velocity/bower.json","modified":1442166513315,"shasum":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409"},{"_id":"public/vendors/jquery/index.js","modified":1442166513317,"shasum":"41b4bfbaa96be6d1440db6e78004ade1c134e276"},{"_id":"public/vendors/fancybox/sprite.psd","modified":1442166513321,"shasum":"2669feac27b2d221bdb133acecf0a39f50d9ec27"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.pack.js","modified":1442166513325,"shasum":"53360764b429c212f424399384417ccc233bb3be"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.js","modified":1442166513329,"shasum":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4"},{"_id":"public/vendors/fancybox/source/jquery.fancybox.css","modified":1442166513330,"shasum":"5f163444617b6cf267342f06ac166a237bb62df9"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":1442166513332,"shasum":"53e194f4a72e649c04fb586dd57762b8c022800b"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":1442166513333,"shasum":"4ac329c16a5277592fc12a37cca3d72ca4ec292f"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-media.js","modified":1442166513335,"shasum":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":1442166513337,"shasum":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876"},{"_id":"public/vendors/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":1442166513338,"shasum":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8"},{"_id":"public/vendors/fancybox/source/helpers/fancybox_buttons.png","modified":1442166513340,"shasum":"e385b139516c6813dcd64b8fc431c364ceafe5f3"},{"_id":"public/vendors/fancybox/source/fancybox_sprite@2x.png","modified":1442166513342,"shasum":"30c58913f327e28f466a00f4c1ac8001b560aed8"},{"_id":"public/vendors/fancybox/source/fancybox_sprite.png","modified":1442166513343,"shasum":"17df19f97628e77be09c352bf27425faea248251"},{"_id":"public/vendors/fancybox/source/fancybox_overlay.png","modified":1442166513345,"shasum":"b3a4ee645ba494f52840ef8412015ba0f465dbe0"},{"_id":"public/vendors/fancybox/source/fancybox_loading@2x.gif","modified":1442166513348,"shasum":"273b123496a42ba45c3416adb027cd99745058b0"},{"_id":"public/vendors/fancybox/source/fancybox_loading.gif","modified":1442166513350,"shasum":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c"},{"_id":"public/vendors/fancybox/source/blank.gif","modified":1442166513352,"shasum":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a"},{"_id":"public/vendors/fancybox/lib/jquery.mousewheel-3.0.6.pack.js","modified":1442166513354,"shasum":"1e1b44eb7cfade680c52d8748846425ecd809bfd"},{"_id":"public/vendors/fancybox/lib/jquery-1.9.0.min.js","modified":1442166513360,"shasum":"002da8cbe90fcf32fbdebb72386125079e3805ee"},{"_id":"public/vendors/fancybox/lib/jquery-1.10.1.min.js","modified":1442166513364,"shasum":"161b78ec52f28657a835e4a5423f03782fd35806"},{"_id":"public/vendors/fancybox/demo/index.html","modified":1442166513368,"shasum":"cd1f8eae2b24fa1d577737af099933f86f34e3df"},{"_id":"public/vendors/fancybox/demo/iframe.html","modified":1442166513370,"shasum":"b3480accf98d43e760acef24b5856201e9e902c8"},{"_id":"public/vendors/fancybox/demo/ajax.txt","modified":1442166513371,"shasum":"6ee706bd746d881ab86e7cb24117f9d6832f8101"},{"_id":"public/vendors/fancybox/demo/5_s.jpg","modified":1442166513372,"shasum":"a0517fde348e6539420b3c4a6c80551d76730c2b"},{"_id":"public/vendors/fancybox/demo/5_b.jpg","modified":1442166513374,"shasum":"d6fdf06b8058a0ff5ce339313996b9ef220431bc"},{"_id":"public/vendors/fancybox/demo/4_s.jpg","modified":1442166513375,"shasum":"f7ecbbd24aa0fde9fe70b86d2148f753229cb6ed"},{"_id":"public/vendors/fancybox/demo/4_b.jpg","modified":1442166513378,"shasum":"9855aed7b58d5662229427c946801460f5664ffd"},{"_id":"public/vendors/fancybox/demo/3_s.jpg","modified":1442166513380,"shasum":"335e622f0253ab09cbf3fd6577a629367aa9ad47"},{"_id":"public/vendors/fancybox/demo/3_b.jpg","modified":1442166513382,"shasum":"08059c8d631ee0c1429e81e61ee15f899ee1471f"},{"_id":"public/vendors/fancybox/demo/2_s.jpg","modified":1442166513383,"shasum":"8d895d7597c81d513e02090da4d646d1b6946e14"},{"_id":"public/vendors/fancybox/demo/2_b.jpg","modified":1442166513384,"shasum":"d374396009087680112482ffcfaef4a3e85838a1"},{"_id":"public/vendors/fancybox/demo/1_s.jpg","modified":1442166513386,"shasum":"7331d8f057362dd1010309893d81d9fdb5519d30"},{"_id":"public/vendors/fancybox/demo/1_b.jpg","modified":1442166513388,"shasum":"f7953162f526e3fc1f37602b0aca0f544d96b095"},{"_id":"public/vendors/fancybox/README.html","modified":1442166513769,"shasum":"db9c13f527f5e93520cc32e34532c9d2b852b34f"},{"_id":"public/vendors/fancybox/CHANGELOG.html","modified":1442166514047,"shasum":"a633c362e7bafb1de5483f4ad27cfb829b57d790"},{"_id":"public/js/motion_global.js","modified":1442166514050,"shasum":"732f0fa7eb6e35b69ac02ab277b0d14685beced5"},{"_id":"public/js/motion_fallback.js","modified":1442166514052,"shasum":"a767d522c65a8b2fbad49135c9332135c6785c3e"},{"_id":"public/js/helpers.js","modified":1442166514053,"shasum":"c2117b0ec653df4c45dd9d9575b190cbe1035335"},{"_id":"public/js/fancy-box.js","modified":1442166514057,"shasum":"18b0ff55461d091b515a1b9e5f843fd2a7516c34"},{"_id":"public/js/bootstrap.scrollspy.js","modified":1442166514058,"shasum":"ae7bdce88b515aade4eea8bf7407eec458bcd625"},{"_id":"public/js/analytics_google-analytics.js","modified":1442166514059,"shasum":"f60bcf719bb55280a219c81d8ae50433aa28cf1a"},{"_id":"public/images/searchicon.png","modified":1442166514061,"shasum":"67727a6a969be0b2659b908518fa6706eed307b8"},{"_id":"public/images/cc-zero.svg","modified":1442166514062,"shasum":"87669bf8ac268a91d027a0a4802c92a1473e9030"},{"_id":"public/images/cc-by.svg","modified":1442166514063,"shasum":"28a0a4fe355a974a5e42f68031652b76798d4f7e"},{"_id":"public/images/cc-by-sa.svg","modified":1442166514066,"shasum":"aa4742d733c8af8d38d4c183b8adbdcab045872e"},{"_id":"public/images/cc-by-nd.svg","modified":1442166514068,"shasum":"c563508ce9ced1e66948024ba1153400ac0e0621"},{"_id":"public/images/cc-by-nc.svg","modified":1442166514069,"shasum":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7"},{"_id":"public/images/cc-by-nc-sa.svg","modified":1442166514070,"shasum":"3031be41e8753c70508aa88e84ed8f4f653f157e"},{"_id":"public/images/cc-by-nc-nd.svg","modified":1442166514071,"shasum":"c6524ece3f8039a5f612feaf865d21ec8a794564"},{"_id":"public/images/bkdefault_avatar.jpg","modified":1442166514073,"shasum":"b687bb4bfbe35a32b592c24d652ba80cfdc770fc"},{"_id":"public/fonts/lato/Lato-Regular.woff","modified":1442166514075,"shasum":"076694a148237be508af30ea717c9d48851b5f0e"},{"_id":"public/fonts/lato/Lato-Regular.ttf","modified":1442166514082,"shasum":"50437629c3570cd7f19f1adf78aa712b9b437f35"},{"_id":"public/fonts/lato/Lato-Regular.eot","modified":1442166514087,"shasum":"9414d25ab488458c2e9d2b091b7a348f54f46c49"},{"_id":"public/fonts/lato/Lato-Italic.woff","modified":1442166514090,"shasum":"48bb1fd23085cbc82b1d55af49a3c60a4bd8917a"},{"_id":"public/fonts/lato/Lato-Italic.ttf","modified":1442166514095,"shasum":"453d1375835f196375be5e9b18e4830b5200a7ed"},{"_id":"public/fonts/lato/Lato-Italic.eot","modified":1442166514099,"shasum":"d8d6965243a228572555233c4c16a530d607688e"},{"_id":"public/fonts/lato/Lato-BoldItalic.woff","modified":1442166514102,"shasum":"692ae52f109ebe25b0f0a327f9e84b636ea7b00c"},{"_id":"public/fonts/lato/Lato-BoldItalic.ttf","modified":1442166514111,"shasum":"ce4f48583e268f7d0bb83e37bbc6cb2cb11c61ba"},{"_id":"public/fonts/lato/Lato-BoldItalic.eot","modified":1442166514116,"shasum":"b213c3c3cf416c311e3f1f0c3718da5d4fe01e91"},{"_id":"public/fonts/lato/Lato-Bold.woff","modified":1442166514125,"shasum":"f3fcdf98e2147bce10d719a51abade970fcc5641"},{"_id":"public/fonts/lato/Lato-Bold.ttf","modified":1442166514131,"shasum":"e0de32d86265939f1144116ad0ac5ab9220244c4"},{"_id":"public/fonts/lato/Lato-Bold.eot","modified":1442166514137,"shasum":"75418bc99e564f8a5c85065d320a2a4c89bc125b"},{"_id":"public/fonts/icon-linecons/icomoon.woff","modified":1442166514141,"shasum":"d1ed08a17670fa259df02c1d52dc9ce754343775"},{"_id":"public/fonts/icon-linecons/icomoon.ttf","modified":1442166514143,"shasum":"c8ec218adabc788b17f976f60dd1c5fa872d9fc4"},{"_id":"public/fonts/icon-linecons/icomoon.svg","modified":1442166514146,"shasum":"888a285a4a7329210b2210742c673611c27425eb"},{"_id":"public/fonts/icon-linecons/icomoon.eot","modified":1442166514149,"shasum":"176695cc0dc12daba049b2bb889397a7bf2e553c"},{"_id":"public/fonts/icon-icomoon/icomoon.woff","modified":1442166514150,"shasum":"05f1ec0bd307da5e731a86eb4961589a6042aebb"},{"_id":"public/fonts/icon-icomoon/icomoon.ttf","modified":1442166514152,"shasum":"f399713d1c9400d4d3373e38991a7e362a754a94"},{"_id":"public/fonts/icon-icomoon/icomoon.svg","modified":1442166514154,"shasum":"e316347805eb93425faa678611c5e42a7152da8f"},{"_id":"public/fonts/icon-icomoon/icomoon.eot","modified":1442166514155,"shasum":"301fcf00c24750dddf1c529f944ca62c7f1a217d"},{"_id":"public/fonts/icon-fifty-shades/icomoon.woff","modified":1442166514157,"shasum":"088a16303b0700e1c9e2c6962240b4c2f0fc3aa4"},{"_id":"public/fonts/icon-fifty-shades/icomoon.ttf","modified":1442166514159,"shasum":"e0b5e4a23a949bac499908bcef2fae56430e230e"},{"_id":"public/fonts/icon-fifty-shades/icomoon.svg","modified":1442166514161,"shasum":"f0790da03008b6cb3ae4215cbb656cb4b4599633"},{"_id":"public/fonts/icon-fifty-shades/icomoon.eot","modified":1442166514163,"shasum":"f27c3643af6ed6f3d29a0be0c8dbea9b157857db"},{"_id":"public/fonts/icon-feather/icomoon.woff","modified":1442166514164,"shasum":"9159eea8641b840e0f7aa6e087dae414044ecdd3"},{"_id":"public/fonts/icon-feather/icomoon.ttf","modified":1442166514166,"shasum":"8c865cffa3845be32406737fcc0466cf9cd965b3"},{"_id":"public/fonts/icon-feather/icomoon.svg","modified":1442166514168,"shasum":"690836f81c0feb1a49e2253d4f984ad543414986"},{"_id":"public/fonts/icon-feather/icomoon.eot","modified":1442166514173,"shasum":"6d0eb1a5bfef4f2bf77089bd090e88c5b2f7944d"},{"_id":"public/fonts/icon-default/icomoon.woff","modified":1442166514178,"shasum":"4d0adc55240f331c6de225e23afd76ea5318da9c"},{"_id":"public/fonts/icon-default/icomoon.ttf","modified":1442166514180,"shasum":"e6452f07b050ee0ff265b3b99a1e7ef82eb561b2"},{"_id":"public/fonts/icon-default/icomoon.svg","modified":1442166514182,"shasum":"4f18f0bb815b1aeba57739069c3416106240b7c1"},{"_id":"public/fonts/icon-default/icomoon.eot","modified":1442166514184,"shasum":"a58d5e893c6faefc90d5c2589cc314dff8ffca7a"},{"_id":"public/css/main.css","modified":1442167213539,"shasum":"6d315ef42618ddb3356e292e127a503e7a525845"},{"_id":"public/favicon.ico","modified":1442166514843,"shasum":"4f6fbc8126779d68897dae096ec350e10a3b6ced"},{"_id":"public/media/file/20140315/2.jpg","modified":1442166514845,"shasum":"7895085d1c19640db1fe977f303486249e4efa8c"},{"_id":"public/media/file/20140504/process.jpg","modified":1442166514848,"shasum":"4b3eb098b140535d6f90c52e51a70c7288252b28"},{"_id":"public/media/file/20140315/1.jpg","modified":1442166514850,"shasum":"5dd2048d3214a3e2690d2b175ff804f52b010a0b"},{"_id":"public/media/file/20140504/result.jpg","modified":1442166514852,"shasum":"23e2c03dd3f4008fe522cd841c1b615a90b986f9"},{"_id":"public/media/file/20140315/3.jpg","modified":1442166514857,"shasum":"ce6d4f74c3b9d8332d04102d96de6c20e9621e5e"},{"_id":"source/media/1442160401385.png","shasum":"afa20e69ae386a2fb867c7a57c178fdf7738efdd","modified":1442162360000},{"_id":"source/media/1442161266216.png","shasum":"db14a60181a79c937b7a3153f47bb98a1d342696","modified":1442162360000},{"_id":"source/media/1442162089697.png","shasum":"522932b66bedde151a8c99cabaf4c0680b139683","modified":1442162360000},{"_id":"source/media/1442160050001.png","shasum":"e265ae57cbe1aa5fe4a5e3de3016c29bd3cc4ece","modified":1442162360000},{"_id":"source/media/1442160889138.png","shasum":"edf5d64d1219f6e0ed73d3e3a29a17e6e12db48c","modified":1442162360000},{"_id":"public/media/1442160050001.png","modified":1442167432590,"shasum":"e265ae57cbe1aa5fe4a5e3de3016c29bd3cc4ece"},{"_id":"public/media/1442162089697.png","modified":1442167432596,"shasum":"522932b66bedde151a8c99cabaf4c0680b139683"},{"_id":"public/media/1442161266216.png","modified":1442167432599,"shasum":"db14a60181a79c937b7a3153f47bb98a1d342696"},{"_id":"public/media/1442160889138.png","modified":1442167432603,"shasum":"edf5d64d1219f6e0ed73d3e3a29a17e6e12db48c"},{"_id":"public/media/1442160401385.png","modified":1442167432607,"shasum":"afa20e69ae386a2fb867c7a57c178fdf7738efdd"}],"Category":[],"Data":[],"Page":[{"title":"tags","date":"2015-06-09T13:45:34.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"title: tags\ndate: 2015-06-09 21:45:34\ntype: tags\n---\n","updated":"2015-06-09T13:47:03.000Z","path":"tags/index.html","_id":"ciapdr6wm00008mfv396p2sva","comments":1,"layout":"page"}],"Post":[{"title":"终于进入了博客的第三层境界了","date":"2014-03-12T16:00:00.000Z","layout":"post","description":"都说博客有三境界：一是使用新浪网易等免费的博客，二是自己买空间和域名搭建Wordpress，最后是来到Github Pages了。","_content":"\n都说博客有三境界：一是使用新浪网易等免费的博客，二是自己买空间和域名搭建Wordpress，最后是来到Github Pages了。\n\n折腾了两天，衣带渐宽，发现自己设计的细胞还是不够。于是在[rusty shutter][1]的基础上，修改了下代码，加入了国内的多说评论模块和Google Analytics统计信息，终于可以投入使用了。已经在Sina SAE搭建的[博客][2]，就废弃吧。\n\n众里寻他千百度，毕业后期待人生下个美好的阶段，将点滴记录于此。\n\nAt 1:04 a.m.\n\n[1]: http://lhzhang.com\n[2]: http://yewen.sinaapp.com\n","source":"_posts/2014-03-13-first-blog.markdown","raw":"---\ntitle: 终于进入了博客的第三层境界了\ndate: 2014-03-13\nlayout: post\ndescription: 都说博客有三境界：一是使用新浪网易等免费的博客，二是自己买空间和域名搭建Wordpress，最后是来到Github Pages了。\ntags:\n  - github \n  - pages\n  - life\n---\n\n都说博客有三境界：一是使用新浪网易等免费的博客，二是自己买空间和域名搭建Wordpress，最后是来到Github Pages了。\n\n折腾了两天，衣带渐宽，发现自己设计的细胞还是不够。于是在[rusty shutter][1]的基础上，修改了下代码，加入了国内的多说评论模块和Google Analytics统计信息，终于可以投入使用了。已经在Sina SAE搭建的[博客][2]，就废弃吧。\n\n众里寻他千百度，毕业后期待人生下个美好的阶段，将点滴记录于此。\n\nAt 1:04 a.m.\n\n[1]: http://lhzhang.com\n[2]: http://yewen.sinaapp.com\n","slug":"2014-03-13-first-blog","published":1,"updated":"2015-06-09T13:50:09.000Z","_id":"ciapcaggd00006ufvf2misam9","comments":1,"photos":[],"link":""},{"title":"iOS 保存和读取本地数据","date":"2015-06-06T16:00:00.000Z","layout":"post","description":"本文记录了如何将iOS app中的数据,如图片和实例中的属性保存到本地,应用退出或者切换状态后,能够重新恢复数据","_content":"### 类要遵循的[protocol]和实现的methods  (id:top)\n\n>>要想将一个object中的property保存到本地, 这个object的对应的class应该遵循 NSCoding协议, 并实现其2个methods: \n\n* NSCoding protocol\n\n```\n@interface BNRItem : NSObject <nscoding>\n```\n\n*  encodeWIthCoder \n\n将class中的property以key-value的形式进行encode, 并将数据流存储到本地的文件系统中, 其中key设定为property的名称.\n\n```\n- (void)encodeWithCoder:(NSCoder *)aCoder{\n    \n    [aCoder encodeObject:self.itemName forKey:@\"itemName\"];\n    [aCoder encodeObject:self.serialNumber forKey:@\"serialNumber\"];\n    [aCoder encodeObject:self.dateCreated forKey:@\"dateCreated\"];\n    [aCoder encodeObject:self.itemKey forKey:@\"itemKey\"];\n    [aCoder encodeInt:self.valueInDollars forKey:@\"valueInDollars\"];\n}\n\n\n```\n* initWithCoder \n\n从encodeWithCoder中的数据中, 恢复数据, 并赋值给各个property,\n\n```\n- (id)initWithCoder:(NSCoder *)aDecoder{\n    self = [super init];\n    if (self) {\n        _itemName = [aDecoder decodeObjectForKey:@\"itemName\"];\n        _serialNumber = [aDecoder decodeObjectForKey:@\"serialNumber\"];\n        _dateCreated = [aDecoder decodeObjectForKey:@\"dateCreated\"];\n        _itemKey = [aDecoder decodeObjectForKey:@\"itemKey\"];\n        _valueInDollars = [aDecoder decodeIntForKey:@\"valueInDollars\"];\n    }\n    \n    return self;\n\n}\n```\n\n### 选定保存数据的路径和目录\n每一个应用都有其对应的sandbox, 只有本身可以访问,与其他app隔离, sandbox包含的目录有:\n\n* application bundle: 只读, NIB和图标等文件\n\n* Documents/: 存储的文件, 可用iCloud备份;\n\n* Library/Caches/: 缓存的文件, 不能备份;\n\n* Library/Preferences/: app的setting等设置\n\n* tmp/ : 临时文件, 注意其清理\n\n查找Document/的目录代码并指定保存的文件名称:\n\n```c\n- (NSString *) itemArchivePath {\n   NSArray *documentDirs =  NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    \n    NSString * documentDir = [documentDirs firstObject];\n    NSString *fileName = @\"item.archive\";\n    \n    return  [documentDir stringByAppendingPathComponent:fileName];\n\n}\n```\n\n### 如何开始将数据保存到本地\n\n设定好要保存的property和路径后, 就需要在app进入后台的时候(双击home键), 触发保存事件.\n\n```c\n- (void)applicationDidEnterBackground:(UIApplication *)application\n{\n    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. \n    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.\n    BOOL success = [[BNRItemStore sharedStore] saveChanges];\n    if (success) {\n        NSLog(@\"saved all items\");\n    }else{\n        NSLog(@\"Failed: can't sace items data!\");\n    }\n}\n\n/* save changes保存的函数\n*  self.privateItems为一个数组, 里面包含了多个item\n*/ NSKeyedArchiver 会递归的调用数组里每一个item的 encodeWithCoder 方法\n- (BOOL) saveChanges{\n    NSString * fileName = [self itemArchivePath]; \n    return [NSKeyedArchiver archiveRootObject:self.privateItems toFile:fileName];\n\n}\n```\n\n### 如何将数据load到app中\n\n```c\nNSString *path = [self itemArchivePath];\n_privateItems = [NSKeyedUnarchiver unarchiveObjectWithFile:path];\n```\n\n### 对于图片的保存, 可以采用NSData的writeToFile:path\n\n```c\n// 获取图片的保存目录\n- (NSString *)imagePathForKey:(NSString *)key\n{\n    NSArray *documentDirectories =\n            NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,\n                                                NSUserDomainMask,\n                                                YES);\n    NSString *documentDirectory = [documentDirectories firstObject];\n    return [documentDirectory stringByAppendingPathComponent:key];\n}\n\n// 保存图片到本地\nNSString *imagePath = [self imagePathForKey:key];\n // Turn image into JPEG data\n    NSData *data = UIImageJPEGRepresentation(image, 0.5);\n    // Write it to full path\n    [data writeToFile:imagePath atomically:YES];\n\n// 读取本地的图片\nNSString *imagePath = [self imagePathForKey:key];\n // Create UIImage object from file\n  result = [UIImage imageWithContentsOfFile:imagePath];\n```\n\n返回[顶部](#top)\n\nAt 15:56 PM\n\n##参考资料\n* iOS Programming The Big Nerd Ranch Guide 4th Edition\n","source":"_posts/2015-06-07-ios-saving-loading-local-data.md","raw":"---\ntitle: \"iOS 保存和读取本地数据\"\ndate: 2015-06-07\nlayout: post\ndescription: \"本文记录了如何将iOS app中的数据,如图片和实例中的属性保存到本地,应用退出或者切换状态后,能够重新恢复数据\"\ntags: [iOS入门,NSCoding,应用状态,Object C]\n---\n### 类要遵循的[protocol]和实现的methods  (id:top)\n\n>>要想将一个object中的property保存到本地, 这个object的对应的class应该遵循 NSCoding协议, 并实现其2个methods: \n\n* NSCoding protocol\n\n```\n@interface BNRItem : NSObject <nscoding>\n```\n\n*  encodeWIthCoder \n\n将class中的property以key-value的形式进行encode, 并将数据流存储到本地的文件系统中, 其中key设定为property的名称.\n\n```\n- (void)encodeWithCoder:(NSCoder *)aCoder{\n    \n    [aCoder encodeObject:self.itemName forKey:@\"itemName\"];\n    [aCoder encodeObject:self.serialNumber forKey:@\"serialNumber\"];\n    [aCoder encodeObject:self.dateCreated forKey:@\"dateCreated\"];\n    [aCoder encodeObject:self.itemKey forKey:@\"itemKey\"];\n    [aCoder encodeInt:self.valueInDollars forKey:@\"valueInDollars\"];\n}\n\n\n```\n* initWithCoder \n\n从encodeWithCoder中的数据中, 恢复数据, 并赋值给各个property,\n\n```\n- (id)initWithCoder:(NSCoder *)aDecoder{\n    self = [super init];\n    if (self) {\n        _itemName = [aDecoder decodeObjectForKey:@\"itemName\"];\n        _serialNumber = [aDecoder decodeObjectForKey:@\"serialNumber\"];\n        _dateCreated = [aDecoder decodeObjectForKey:@\"dateCreated\"];\n        _itemKey = [aDecoder decodeObjectForKey:@\"itemKey\"];\n        _valueInDollars = [aDecoder decodeIntForKey:@\"valueInDollars\"];\n    }\n    \n    return self;\n\n}\n```\n\n### 选定保存数据的路径和目录\n每一个应用都有其对应的sandbox, 只有本身可以访问,与其他app隔离, sandbox包含的目录有:\n\n* application bundle: 只读, NIB和图标等文件\n\n* Documents/: 存储的文件, 可用iCloud备份;\n\n* Library/Caches/: 缓存的文件, 不能备份;\n\n* Library/Preferences/: app的setting等设置\n\n* tmp/ : 临时文件, 注意其清理\n\n查找Document/的目录代码并指定保存的文件名称:\n\n```c\n- (NSString *) itemArchivePath {\n   NSArray *documentDirs =  NSSearchPathForDirectoriesInDomains(NSDocumentDirectory, NSUserDomainMask, YES);\n    \n    NSString * documentDir = [documentDirs firstObject];\n    NSString *fileName = @\"item.archive\";\n    \n    return  [documentDir stringByAppendingPathComponent:fileName];\n\n}\n```\n\n### 如何开始将数据保存到本地\n\n设定好要保存的property和路径后, 就需要在app进入后台的时候(双击home键), 触发保存事件.\n\n```c\n- (void)applicationDidEnterBackground:(UIApplication *)application\n{\n    // Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. \n    // If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.\n    BOOL success = [[BNRItemStore sharedStore] saveChanges];\n    if (success) {\n        NSLog(@\"saved all items\");\n    }else{\n        NSLog(@\"Failed: can't sace items data!\");\n    }\n}\n\n/* save changes保存的函数\n*  self.privateItems为一个数组, 里面包含了多个item\n*/ NSKeyedArchiver 会递归的调用数组里每一个item的 encodeWithCoder 方法\n- (BOOL) saveChanges{\n    NSString * fileName = [self itemArchivePath]; \n    return [NSKeyedArchiver archiveRootObject:self.privateItems toFile:fileName];\n\n}\n```\n\n### 如何将数据load到app中\n\n```c\nNSString *path = [self itemArchivePath];\n_privateItems = [NSKeyedUnarchiver unarchiveObjectWithFile:path];\n```\n\n### 对于图片的保存, 可以采用NSData的writeToFile:path\n\n```c\n// 获取图片的保存目录\n- (NSString *)imagePathForKey:(NSString *)key\n{\n    NSArray *documentDirectories =\n            NSSearchPathForDirectoriesInDomains(NSDocumentDirectory,\n                                                NSUserDomainMask,\n                                                YES);\n    NSString *documentDirectory = [documentDirectories firstObject];\n    return [documentDirectory stringByAppendingPathComponent:key];\n}\n\n// 保存图片到本地\nNSString *imagePath = [self imagePathForKey:key];\n // Turn image into JPEG data\n    NSData *data = UIImageJPEGRepresentation(image, 0.5);\n    // Write it to full path\n    [data writeToFile:imagePath atomically:YES];\n\n// 读取本地的图片\nNSString *imagePath = [self imagePathForKey:key];\n // Create UIImage object from file\n  result = [UIImage imageWithContentsOfFile:imagePath];\n```\n\n返回[顶部](#top)\n\nAt 15:56 PM\n\n##参考资料\n* iOS Programming The Big Nerd Ranch Guide 4th Edition\n","slug":"2015-06-07-ios-saving-loading-local-data","published":1,"updated":"2015-06-09T14:16:32.000Z","_id":"ciapcagil00086ufvpemangjw","comments":1,"photos":[],"link":""},{"title":"iOS URL请求和JSON的解析","date":"2015-06-01T16:00:00.000Z","layout":"post","description":"本文主要记录如何在iOS中使用webView来查看网页的内容","_content":"##如何请求一个给定的url并处理返回的[数据](id:top)\n\n*  将给定的url字符串转化为 NSURL 对象\n\n```c\n  NSString * requestString = @\"http://bookapi.bignerdranch.com/courses.json\";\n  NSURL * url = [NSURL URLWithString:requestString];\n```\n\n*  初始化请求 NSURLRequest\n\nNSURLRequest 包含了请求的各种参数,如http头部,超时时间,缓存策略等.\n\n```c\n  NSString * requestString = @\"http://bookapi.bignerdranch.com/courses.json\";\n  NSURL * url = [NSURL URLWithString:requestString];\n  NSURLRequest  *req = [NSURLRequest requestWithURL:url];\n\n```\n\n*  将一个请求看做一个任务,一个任务的初始化状态是suspend, 当发送resume消息给任务后,请求任务就开始执行. 其中,一个任务中包含了回调函数(completionHandler),回调函数对返回的数据(Json或者XML等)进行处理.\n\n```c\n- (void) fetchFeed {\n    NSString * requestString = @\"http://bookapi.bignerdranch.com/courses.json\";\n    NSURL * url = [NSURL URLWithString:requestString];\n    NSURLRequest  *req = [NSURLRequest requestWithURL:url];\n    \n    NSURLSessionDataTask * dataTask = [self.session\n                                       dataTaskWithRequest:req\n                                       completionHandler:\n\t\t\t\t\t// 回调函数 block, 见下一步\n                                       }];\n    [dataTask resume]; // 请求正式开始\n\n}\n```\n\n* 对JSON格式数据的解析\n\niOS提供了NSJSONSerialization类,对JSON进行解析,解析后的数据类型为字典(NSDictionary). 最终完整的代码为:\n\n```c\n- (void) fetchFeed {\n    NSString * requestString = @\"http://bookapi.bignerdranch.com/courses.json\";\n    NSURL * url = [NSURL URLWithString:requestString];\n    NSURLRequest  *req = [NSURLRequest requestWithURL:url];\n    \n    NSURLSessionDataTask * dataTask = [self.session\n                                       dataTaskWithRequest:req\n                                       completionHandler:\n\t\t\t\t\t// 回调函数 block\n                                       ^(NSData *data, NSURLResponse *response, NSError *error) { \n                                           NSDictionary *jsonObject = [NSJSONSerialization JSONObjectWithData:data options:0 error:nil];\n                                           self.courses = jsonObject[@\"courses\"];\n                                           NSLog(@\"%@\",self.courses);\n                                       }];\n    [dataTask resume];\n\n}\n\n\n```\n返回[顶部](#top)\n\nAt 10:04 PM\n\n##参考资料\n* iOS Programming The Big Nerd Ranch Guide 4th Edition\n","source":"_posts/2015-06-02-ios-url-json.md","raw":"---\ntitle: \"iOS URL请求和JSON的解析\"\ndate: 2015-06-02\nlayout: post\ndescription: \"本文主要记录如何在iOS中使用webView来查看网页的内容\"\ntags: [iOS入门,webView,Object C]\n---\n##如何请求一个给定的url并处理返回的[数据](id:top)\n\n*  将给定的url字符串转化为 NSURL 对象\n\n```c\n  NSString * requestString = @\"http://bookapi.bignerdranch.com/courses.json\";\n  NSURL * url = [NSURL URLWithString:requestString];\n```\n\n*  初始化请求 NSURLRequest\n\nNSURLRequest 包含了请求的各种参数,如http头部,超时时间,缓存策略等.\n\n```c\n  NSString * requestString = @\"http://bookapi.bignerdranch.com/courses.json\";\n  NSURL * url = [NSURL URLWithString:requestString];\n  NSURLRequest  *req = [NSURLRequest requestWithURL:url];\n\n```\n\n*  将一个请求看做一个任务,一个任务的初始化状态是suspend, 当发送resume消息给任务后,请求任务就开始执行. 其中,一个任务中包含了回调函数(completionHandler),回调函数对返回的数据(Json或者XML等)进行处理.\n\n```c\n- (void) fetchFeed {\n    NSString * requestString = @\"http://bookapi.bignerdranch.com/courses.json\";\n    NSURL * url = [NSURL URLWithString:requestString];\n    NSURLRequest  *req = [NSURLRequest requestWithURL:url];\n    \n    NSURLSessionDataTask * dataTask = [self.session\n                                       dataTaskWithRequest:req\n                                       completionHandler:\n\t\t\t\t\t// 回调函数 block, 见下一步\n                                       }];\n    [dataTask resume]; // 请求正式开始\n\n}\n```\n\n* 对JSON格式数据的解析\n\niOS提供了NSJSONSerialization类,对JSON进行解析,解析后的数据类型为字典(NSDictionary). 最终完整的代码为:\n\n```c\n- (void) fetchFeed {\n    NSString * requestString = @\"http://bookapi.bignerdranch.com/courses.json\";\n    NSURL * url = [NSURL URLWithString:requestString];\n    NSURLRequest  *req = [NSURLRequest requestWithURL:url];\n    \n    NSURLSessionDataTask * dataTask = [self.session\n                                       dataTaskWithRequest:req\n                                       completionHandler:\n\t\t\t\t\t// 回调函数 block\n                                       ^(NSData *data, NSURLResponse *response, NSError *error) { \n                                           NSDictionary *jsonObject = [NSJSONSerialization JSONObjectWithData:data options:0 error:nil];\n                                           self.courses = jsonObject[@\"courses\"];\n                                           NSLog(@\"%@\",self.courses);\n                                       }];\n    [dataTask resume];\n\n}\n\n\n```\n返回[顶部](#top)\n\nAt 10:04 PM\n\n##参考资料\n* iOS Programming The Big Nerd Ranch Guide 4th Edition\n","slug":"2015-06-02-ios-url-json","published":1,"updated":"2015-06-09T13:52:24.000Z","_id":"ciapcagiq000h6ufvwwu7haz3","comments":1,"photos":[],"link":""},{"title":"Shell对输入参数的验证","date":"2014-05-08T16:00:00.000Z","layout":"post","description":"本文实现了对Shell输入参数的验证，包括个数和数据类型。学习如何接收shell函数的返回值以及正则表达式。 ","_content":"##shell函数的返回值\n函数的返回值分为2两种：\n\n* 函数中的echo的标准输出\n* 函数中显式的return返回值\n\n举例：\n\n```bash\nadd () {\n\tresult=$[ $1 + $2 ]\n\treturn $result\n}\n\nadd_2 () {\n\tresult=$[ $1 + $2 ]\n\techo $result\n}\n```\nadd函数的返回值，接收方式为\n\n```bash\n\tadd 1 2\n\tresult=$?\n```\n即return的返回值，只能在函数执行后，根据$?状态判断。\n而add_2的接收方式为\n\n```bash\n\tresult=$(add 1 2)\n```\n即echo的返回值可直接从子语句中接收\n\n##shell对输入参数的验证\n本文要实现目的：如果输入参数全为数字，则显示valid;其他全部为invalid。\n\n思路：先保存输入数据到一个变量，接着对数据进行正则表达式过滤，过滤掉非数字的部分，再与原来的数据对比，一致则说明全部是数据，否则包含了其他字母或者标点。\n\n实现的代码如下：\n\n```bash\n#!/bin/bash\n valid_input (){\n        input=$1\n        compressed=$(echo $input | sed -e \"s/[^[:digit:]]//g\" );\n        if [ \"$compressed\" != \"$input\" ];then\n                return 1\n        else\n                return 0\n        fi\n}\n        read -p \"input your value here>\" input\n\tvalid_input $input\n        if  [ $? -eq 1 ];then\n                echo \"invalid\"\n        else\n                echo \"valid\"\n        fi\n        exit 0\n```\n其中，[:digit:]表示数字，可根据需求换成其他，如[:alnum:]表示数字和字母；[^[:digit:]] 表示否定，即非数字；\n另外，函数执行是否成功，可以用下面的方法，简写：\n\n```bash\n\tread -p \"input your value here>\" input\n        if  ! valid_input \"$input\";then\n                echo \"invalid\"\n        else\n                echo \"valid\"\n        fi\n        exit 0\n```\nif fun_name表示，函数成功后（返回0），if为真；否则if为假。\nif ! fun_name表示，函数不成功（返回不为0），if为真。\n这和上面的有一点冲突，只需要记住 if认为后面的函数返回为0时，条件才为真。\n\n##执行结果\n\n```bash\nsh valid_input.sh \ninput>frank\ninvalid\n\nsh valid_input.sh \ninput>11111\nvalid\n\nsh valid_input.sh \ninput>1111frank\ninvalid\n\n```\nAt 11:00 PM\n\n##参考资料\n* Wicked.Cool.Shell.Scripts\n* http://blog.csdn.net/mdx20072419/article/details/9381339\n","source":"_posts/2014-05-09-valid-input-with-shell.md","raw":"---\ntitle: \"Shell对输入参数的验证\"\ndate: 2014-05-09\nlayout: post\ndescription: \"本文实现了对Shell输入参数的验证，包括个数和数据类型。学习如何接收shell函数的返回值以及正则表达式。\n\t     \"\ntags: [输入验证,Shell,Wicked Cool Shell Scripts]\n---\n##shell函数的返回值\n函数的返回值分为2两种：\n\n* 函数中的echo的标准输出\n* 函数中显式的return返回值\n\n举例：\n\n```bash\nadd () {\n\tresult=$[ $1 + $2 ]\n\treturn $result\n}\n\nadd_2 () {\n\tresult=$[ $1 + $2 ]\n\techo $result\n}\n```\nadd函数的返回值，接收方式为\n\n```bash\n\tadd 1 2\n\tresult=$?\n```\n即return的返回值，只能在函数执行后，根据$?状态判断。\n而add_2的接收方式为\n\n```bash\n\tresult=$(add 1 2)\n```\n即echo的返回值可直接从子语句中接收\n\n##shell对输入参数的验证\n本文要实现目的：如果输入参数全为数字，则显示valid;其他全部为invalid。\n\n思路：先保存输入数据到一个变量，接着对数据进行正则表达式过滤，过滤掉非数字的部分，再与原来的数据对比，一致则说明全部是数据，否则包含了其他字母或者标点。\n\n实现的代码如下：\n\n```bash\n#!/bin/bash\n valid_input (){\n        input=$1\n        compressed=$(echo $input | sed -e \"s/[^[:digit:]]//g\" );\n        if [ \"$compressed\" != \"$input\" ];then\n                return 1\n        else\n                return 0\n        fi\n}\n        read -p \"input your value here>\" input\n\tvalid_input $input\n        if  [ $? -eq 1 ];then\n                echo \"invalid\"\n        else\n                echo \"valid\"\n        fi\n        exit 0\n```\n其中，[:digit:]表示数字，可根据需求换成其他，如[:alnum:]表示数字和字母；[^[:digit:]] 表示否定，即非数字；\n另外，函数执行是否成功，可以用下面的方法，简写：\n\n```bash\n\tread -p \"input your value here>\" input\n        if  ! valid_input \"$input\";then\n                echo \"invalid\"\n        else\n                echo \"valid\"\n        fi\n        exit 0\n```\nif fun_name表示，函数成功后（返回0），if为真；否则if为假。\nif ! fun_name表示，函数不成功（返回不为0），if为真。\n这和上面的有一点冲突，只需要记住 if认为后面的函数返回为0时，条件才为真。\n\n##执行结果\n\n```bash\nsh valid_input.sh \ninput>frank\ninvalid\n\nsh valid_input.sh \ninput>11111\nvalid\n\nsh valid_input.sh \ninput>1111frank\ninvalid\n\n```\nAt 11:00 PM\n\n##参考资料\n* Wicked.Cool.Shell.Scripts\n* http://blog.csdn.net/mdx20072419/article/details/9381339\n","slug":"2014-05-09-valid-input-with-shell","published":1,"updated":"2015-06-09T13:51:54.000Z","_id":"ciapcagji000m6ufvn03k0tb0","comments":1,"photos":[],"link":""},{"title":"Perl实现可变字节码算法 ","date":"2014-05-03T16:00:00.000Z","layout":"post","description":"最近在阅读《大规模Web服务开发技术》一书，作为练习和鞭策，决定系统地写一写博客，加深理解。本文用Perl实现了可变字节码算法，对递增的整数序列的文本进行了压缩，压缩率能达到59%。 ","_content":"##可变字节码的定义\n\n```\n数值\t                  32位二进制\t\t\t    可变字节码\n5\t\t00000000 00000000 00000000 00000101 \t     10000101\n130\t\t00000000 00000000 00000000 10000010\t  00000001 10000010\n```\n可变字节码，将整数序列中的冗余的高位0都去掉，其中130的可变字节码为00000001 10000010，前面8位中的1表示1*128，后面8位中最高位的1表示，这是最终的一个字节，代表数字的结束。\n所以130 = 1*128 + 2 （最后字节中的10），而 5 = 101（二进制）\n可以看出，数值越小，可变字节码位数越少。因此对于递增的整数序列[1,2,12,20,39],可以只存储相邻值的差，从而减少了数值的大小。处理后变为[1,1,10,8,19]\n\n##Perl实现的原理\n\n###测试数据的生成\ndata_gen.pl > data.txt\n\n```perl\n#!/usr/bin/perl\n\nwhile (1) {\n  print \"1,2,3,4,5,128,130,258,300,512,568,1024\\n\";\n}\n```\n\n###压缩 \n1. 对输入的数值n，与128比较。\n2. 小于128，则直接用pack函数输出二进制到文件中；\n3. 大于128，则循环，将n%128的结果插入到数组的开头（unshift）；\n4. 最后，在数组的最后一位加上128，表示这是最终的一个字节。\n并将数组pack成字符（1个4Byte的int，被压缩成了2Byte的二进制），输出到二进制文件中\n\nencode.pl程序如下：\n./encode.pl data.txt > data.bin\n\n```perl\n#!/usr/bin/perl\nuse strict;\nuse warnings;\nuse integer;\n\nwhile(<>){\n        chomp;\n        my $pre = 0;\n        my $output;\n        foreach my $num ( split ',',$_ ){\n                $output .= encode($num-$pre);\n                $pre = $num;\n        }\n        print $output.\"\\n\";\n}\n \nsub encode {\n\tmy $num = shift;\n\tmy @bytes;\n\n\twhile (1) {\n        unshift @bytes, $num % 128;\n        last if ($num < 128);\n        $num = $num/128;\n\t}\n\t$bytes[-1] += 128; #add 1 sign to the last byte(8 bits)\n\treturn pack('C*',@bytes);\n}\n```\n\n###解压\n1. 对输入的二进制流进行unpack\n2. 数值 = 高8位*128 + 低8位-128 （减去结束字节的标志）\n3. 整数序列中[a,b,c,d],还原后变成[a,a+b,(a+b)+c,(a+b+c)+d]\n\n./decode.pl data.bin > data.restore\n\n```perl\n#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nwhile(<>){\n        chomp;\n        my $pre =0;\n        my @result;\n        foreach my $c (decode($_)) {\n                push @result, $pre+$c;\n                $pre += $c;\n        }\n        print join (\",\" ,@result) ,\"\\n\";\n}\n\nsub decode {\n\tmy $stream = shift;\n\tmy $n = 0;\n\tmy @arr;\n\tforeach my $c ( unpack('C*',$stream) ){\n\t\tif ($c < 128){\n\t\t\t$n = 128 * $n + $c;\t\t\n\t\t}else{\n\t\t\tpush @arr,128*$n + ($c-128);\n\t\t\t$n = 0;\n\t\t}\n\t}\n\treturn wantarray? @arr : $arr[0]; #根据调用的环境，决定返回数组还是标量\n}\n```\n###压缩的效果图\n\n![setting](/media/file/20140504/process.jpg)\n\n![setting](/media/file/20140504/result.jpg)\n\n文件已经从399M压缩到了163M，压缩率为(399-163)/399 = 0.59\n\n\nAt 1:03 AM\n\n##参考资料\n* 《大规模Web服务开发技术》\n","source":"_posts/2014-05-04-variable-byte-code-with-perl.md","raw":"---\ntitle: \"Perl实现可变字节码算法\n\t\"\ndate: 2014-05-04\nlayout: post\ndescription: \"最近在阅读《大规模Web服务开发技术》一书，作为练习和鞭策，决定系统地写一写博客，加深理解。本文用Perl实现了可变字节码算法，对递增的整数序列的文本进行了压缩，压缩率能达到59%。\n\t     \"\ntags: [可变字节码,Variable Byte Code,Perl,压缩,算法]\n---\n##可变字节码的定义\n\n```\n数值\t                  32位二进制\t\t\t    可变字节码\n5\t\t00000000 00000000 00000000 00000101 \t     10000101\n130\t\t00000000 00000000 00000000 10000010\t  00000001 10000010\n```\n可变字节码，将整数序列中的冗余的高位0都去掉，其中130的可变字节码为00000001 10000010，前面8位中的1表示1*128，后面8位中最高位的1表示，这是最终的一个字节，代表数字的结束。\n所以130 = 1*128 + 2 （最后字节中的10），而 5 = 101（二进制）\n可以看出，数值越小，可变字节码位数越少。因此对于递增的整数序列[1,2,12,20,39],可以只存储相邻值的差，从而减少了数值的大小。处理后变为[1,1,10,8,19]\n\n##Perl实现的原理\n\n###测试数据的生成\ndata_gen.pl > data.txt\n\n```perl\n#!/usr/bin/perl\n\nwhile (1) {\n  print \"1,2,3,4,5,128,130,258,300,512,568,1024\\n\";\n}\n```\n\n###压缩 \n1. 对输入的数值n，与128比较。\n2. 小于128，则直接用pack函数输出二进制到文件中；\n3. 大于128，则循环，将n%128的结果插入到数组的开头（unshift）；\n4. 最后，在数组的最后一位加上128，表示这是最终的一个字节。\n并将数组pack成字符（1个4Byte的int，被压缩成了2Byte的二进制），输出到二进制文件中\n\nencode.pl程序如下：\n./encode.pl data.txt > data.bin\n\n```perl\n#!/usr/bin/perl\nuse strict;\nuse warnings;\nuse integer;\n\nwhile(<>){\n        chomp;\n        my $pre = 0;\n        my $output;\n        foreach my $num ( split ',',$_ ){\n                $output .= encode($num-$pre);\n                $pre = $num;\n        }\n        print $output.\"\\n\";\n}\n \nsub encode {\n\tmy $num = shift;\n\tmy @bytes;\n\n\twhile (1) {\n        unshift @bytes, $num % 128;\n        last if ($num < 128);\n        $num = $num/128;\n\t}\n\t$bytes[-1] += 128; #add 1 sign to the last byte(8 bits)\n\treturn pack('C*',@bytes);\n}\n```\n\n###解压\n1. 对输入的二进制流进行unpack\n2. 数值 = 高8位*128 + 低8位-128 （减去结束字节的标志）\n3. 整数序列中[a,b,c,d],还原后变成[a,a+b,(a+b)+c,(a+b+c)+d]\n\n./decode.pl data.bin > data.restore\n\n```perl\n#!/usr/bin/perl\nuse strict;\nuse warnings;\n\nwhile(<>){\n        chomp;\n        my $pre =0;\n        my @result;\n        foreach my $c (decode($_)) {\n                push @result, $pre+$c;\n                $pre += $c;\n        }\n        print join (\",\" ,@result) ,\"\\n\";\n}\n\nsub decode {\n\tmy $stream = shift;\n\tmy $n = 0;\n\tmy @arr;\n\tforeach my $c ( unpack('C*',$stream) ){\n\t\tif ($c < 128){\n\t\t\t$n = 128 * $n + $c;\t\t\n\t\t}else{\n\t\t\tpush @arr,128*$n + ($c-128);\n\t\t\t$n = 0;\n\t\t}\n\t}\n\treturn wantarray? @arr : $arr[0]; #根据调用的环境，决定返回数组还是标量\n}\n```\n###压缩的效果图\n\n![setting](/media/file/20140504/process.jpg)\n\n![setting](/media/file/20140504/result.jpg)\n\n文件已经从399M压缩到了163M，压缩率为(399-163)/399 = 0.59\n\n\nAt 1:03 AM\n\n##参考资料\n* 《大规模Web服务开发技术》\n","slug":"2014-05-04-variable-byte-code-with-perl","published":1,"updated":"2015-06-09T13:51:42.000Z","_id":"ciapcagjk000t6ufv34b9gtte","comments":1,"photos":[],"link":""},{"title":"ubuntu在vmware下共享windows 8文件夹","date":"2014-03-14T16:00:00.000Z","layout":"post","description":"在vmware下，如何将Windows下文件夹共享到Ubuntu，使其在Ubuntu虚拟机内也可以直接使用文件  ","_content":"\n以前一直在使用windows+ubuntu双系统，但是总是为了某个软件来回切换重启。所以还是回到了入门linux时用的vmware。\n那时2个系统共享文件是用的SftpDrive，将Ubuntu的文件系统挂载到windows下。今天要分享的如何将Windows下文件夹\n共享到Ubuntu，使其在Ubuntu虚拟机内也可以直接使用文件。\n\n环境：\n\n* host:  windows 8.1 64bit\n* guest: Ubuntu 13.10 32bit\n* tools: vmware 10 Download [here](http://pan.baidu.com/s/1eQGanOA)\n\n安装好vmware\n\n安装ubuntu 虚拟机\n\n安装好后，在vmware左边面板选择 My Computer->ubuntu->Settings->options->shared folders->enable->add。\n\n点击browser,选择windows下的文件夹，设置如下图所示\t\n![setting](/media/file/20140315/1.jpg)\n\n到/mnt/hgfs下查看刚才选择的共享文件夹\n![hgfs](/media/file/20140315/2.jpg)\n\n为了方便，创建Symbolic link（软链接）到Ubuntu桌面\n\n```bash\nln -s /home/frank/Desktop/winDesktop /mnt/hgfs/Desktop\nln -s /home/frank/Desktop/winDownloads /mnt/hgfs/Downloads\n```\n\n最后效果图：\n![result](/media/file/20140315/3.jpg)\n\n\nAt 20:37\n","source":"_posts/2014-03-15-shared-folders-in-ubuntu-windows8.md","raw":"---\ntitle: ubuntu在vmware下共享windows 8文件夹\ndate: 2014-03-15\nlayout: post\ndescription: \"在vmware下，如何将Windows下文件夹共享到Ubuntu，使其在Ubuntu虚拟机内也可以直接使用文件 \n\t     \"\ntags:\n  - ubuntu\n  - vmware\n  - tech\n---\n\n以前一直在使用windows+ubuntu双系统，但是总是为了某个软件来回切换重启。所以还是回到了入门linux时用的vmware。\n那时2个系统共享文件是用的SftpDrive，将Ubuntu的文件系统挂载到windows下。今天要分享的如何将Windows下文件夹\n共享到Ubuntu，使其在Ubuntu虚拟机内也可以直接使用文件。\n\n环境：\n\n* host:  windows 8.1 64bit\n* guest: Ubuntu 13.10 32bit\n* tools: vmware 10 Download [here](http://pan.baidu.com/s/1eQGanOA)\n\n安装好vmware\n\n安装ubuntu 虚拟机\n\n安装好后，在vmware左边面板选择 My Computer->ubuntu->Settings->options->shared folders->enable->add。\n\n点击browser,选择windows下的文件夹，设置如下图所示\t\n![setting](/media/file/20140315/1.jpg)\n\n到/mnt/hgfs下查看刚才选择的共享文件夹\n![hgfs](/media/file/20140315/2.jpg)\n\n为了方便，创建Symbolic link（软链接）到Ubuntu桌面\n\n```bash\nln -s /home/frank/Desktop/winDesktop /mnt/hgfs/Desktop\nln -s /home/frank/Desktop/winDownloads /mnt/hgfs/Downloads\n```\n\n最后效果图：\n![result](/media/file/20140315/3.jpg)\n\n\nAt 20:37\n","slug":"2014-03-15-shared-folders-in-ubuntu-windows8","published":1,"updated":"2015-06-09T13:51:24.000Z","_id":"ciapcagjo00146ufvn75b32v7","comments":1,"photos":[],"link":""},{"title":"单链表相关问题","date":"2014-03-13T16:00:00.000Z","layout":"post","description":"单链表的常用操作实现:删除、增加、反转、环形...","_content":"\n下面是对单链表的一些总结：\n\n定义情况如下：\n\n```c\n#define TRUE 1\n#define FALSE 0\ntypedef int bool;\ntypedef struct node {\n        struct node * next;\n        int value;\n} Node;\n```\n\n# 1. 针对一个单链表的常用操作\n\n\n##（1）给点一个值value，删除链表中等于此值的节点\n\n\n        先判断头节点的值是否为value，是的话，改变头指针，指向下一个节点；\n        否则，遍历链表，知道找到一个节点，他的next的值为value，\n        将此节点指向下下个节点，最后删除中间的节点。\n        程序如下：\n\n\n```c  \nvoid removeNode ( Node ** head, int value){\n    if ( head == NULL || *head == NULL )\n        return;\n    Node * deleteNode = NULL;\n    if ( (*head)->value == value){ /* if *head is the node to be deleted */\n        deleteNode = *head;\n        *head = (*head)->next;\n    }else{\n        while ( (*head)->next != NULL && (*head)->next->value != value ){\n                (*head) = (*head)->next;\n        }\n \n        if ( (*head)->next != NULL && (*head)->next->value == value){ /* ensure we 've found the node to be deleted */\n            deleteNode = (*head)->next;\n            (*head)->next = (*head)->next->next;\n        }\n    }\n    if ( deleteNode != NULL ){ /* free the node and set it to NULL in case of stray pointer */\n        free(deleteNode);\n        deleteNode = NULL;\n    }\n \n}\n```\n\n \n##（2）在链表尾部新增一个节点，其值为value：\n\n\n    先分配空间，初始化新的节点；如果链表为空，则头部指向新节点；\n    否则，在尾部直接添加新节点即可；\n    程序如下：\n\n```c   \nvoid addNodeToTail ( Node ** head, int value){\n    Node * newNode = (Node *) malloc(sizeof(Node));\n    newNode->next = NULL;\n    newNode->value = value;\n \n    if (*head==NULL){\n        *head = newNode;\n    }else{\n        while ( (*head)->next != NULL )\n            *head = (*head)->next;\n        (*head)->next = newNode;\n    }\n}\n```\n\n##（3）打印一个单链表，但是输出的顺序反向：\n\n\n    可以利用递归，知道最后一个节点（next=NULL）时才打印；\n    然后从栈中返回前面调用的函数，实现了反向打印。\n    程序如下：\n\n```c \nvoid printListReversely ( Node * head ){\n    if ( head == NULL )\n        return;\n    if ( head->next != NULL )\n        printListReversely (head->next);\n    printf(\"%d\\t\",head->next);\n}\n```\n\n##（4）翻转一个单链表，即把原来的链表反向：\n\n\n   只需改变链表中每一个箭头的方向即可；\n   需要3个变量，一个保存现在的节点，一个保存前一个节点，一个保存下一个节点。\n   程序如下：\n\n```c\nNode *  reverseLinkList ( Node * pHead ){\n    if (pHead==NULL)\n        return NULL;\n    Node * pPre =NULL;\n    Node * pCur = pHead;\n    Node * pNext = NULL;\n    while ( pCur != NULL ){\n        pNext = pCur->next;\n        pCur->next = pPre;\n        pPre = pCur;\n        pCur = pNext;\n    }\n    return pCur; /* pCur is the last node b4; and it's the head of the new node now */\n}\n```\n\n##(5) 判断一个链表是否有环\n\n\n   如果链表有环，必定出现在尾部；就像去操场前，需要先走一段路，再进入圆形的跑道；\n   可以设定两个指针，开始都指向head，然后一个指针每次走2步，另外一个每次一步；\n   如果有环，经过圆形环后，快指针必定会追上慢指针；\n   如果碰到指针指向NULL了，则没有环。\n\n   程序如下：\n\n```c\nbool isLoopInList (Node * head){\n    Node * slow = head;\n    Node * fast = head;\n    while ( fast != NULL && fast->next != NULL ){\n        slow = slow->next;\n        fast = fast->next->next;\n        if ( slow == fast)\n            return TRUE;\n    }\n    if ( fast==NULL || fast->next == NULL )\n        return FALSE;\n \n \n}\n```\n\n##（6）如果一个链表有环，请找出进入环的第一个节点\n\n\n 用步骤（5）的方法判断有环时，快慢指针相遇，然后将慢指针重新置为head，\n 快指针停留在相遇的节点；\n 这时候，都同时走，每次一步，再次相遇时，必定在进环的第一个节点。\n （可以按照圆环的路径证明）\n  程序如下：\n \n```c\nNode * fistNodeOfLoop(Node * head){\n    Node * slow = head;\n    Node * fast = head;\n    while ( fast != NULL && fast->next != NULL ){\n        slow = slow->next;\n        fast = fast->next->next;\n        if ( slow == fast)\n            break;\n    }\n    slow = head;\n    while ( slow != fast ){\n        slow = slow->next;\n        fast = fast->next;\n    }\n    return slow;\n \n}\n```\n\n##（7） 打印链表的倒数第K个节点\n\n\n设定2个指针，先让一个走k-1步，然后一起走，每次一步；\n当前面的指针走到尾时，后的指针刚好走到倒数第K个节点。\n程序如下：\n\n```c\nNode * FindLastKNode ( Node * head, unsigned int k ){\n    if ( head == NULL || k ==0 )\n        return NULL;\n \n    Node * fast = head;\n    Node * slow = head;\n    int i=1;\n    for (;i<k;i++){\n if="" (fast-="">next!=NULL)\n            fast = fast->next;\n        else /* k might be larger than the length of list */\n            return NULL;\n    }\n \n \n    while (fast->next!=NULL){\n        fast = fast->next;\n        slow = slow->next;\n    }\n    return slow;\n}\n```\n \n#2. 以上都是针对一个单链表的操作，下面讨论两个单链表，\n现在讨论两个单链表的相交情况\n\n\n##（1）判断给定的2个单链表是否相交\n\n\n 由节点指向的单一性，相交后不会再分开；即相交后的形状如Y，不是X；\n可以分别遍历2个链表，只需判断最后一个节点是否一致，一致则相交，不一致则不相交；\n时间复杂度为 O(m+n)\n\n\n```c\nbool HasCommonNodeOf2Lists ( Node * p1,Node * p2 ){\n        while ( p1->next != NULL )\n            p1 = p1->next;\n        while ( p2->next != NULL )\n            p2 = p2->next;\n \n        return (p1==p2)? TRUE : FALSE;\n \n}\n```\n\n##(2) 如果两个链表相交，找出第一个相交的节点\n\n\n两个链表可能有长有短，可以分别遍历2个链表，计算出长度差diff；\n然后，在长链表上先走diff步，再同时走，直到节点相等时停止，\n这个节点即为第一个相交的节点。\n程序如下：\n\n\n```c\nNode *  firstCommonNodeOf2Lists ( Node * head1,Node * head2 ){\n        if (head1==NULL || head2==NULL)\n            return NULL;\n        int len1 = 0;\n        int len2 = 0;\n        Node * p1 = head1;\n        Node * p2 = head2;\n        while ( p1->next != NULL ){\n             p1 = p1->next;\n             len1++;\n        }\n \n        while ( p2->next != NULL ){\n             p2 = p2->next;\n             len2++;\n        }\n        int diff = len1 - len2;\n        Node * fast = head1;\n        Node * slow = head2;\n        if ( len1<len2 )\n="" diff="len2" -="" len1;\n="" fast="head2;\n" slow="head1;\n" \n="" int="" i="1;\n" for="" (;i<="diff;i++)\n">next;\n \n        while ( fast != slow ){\n            fast = fast->next;\n            slow = slow->next;\n        }\n        return slow;\n}\n```\n","source":"_posts/2014-03-14-single-linked-list-problems.md","raw":"---\ntitle: 单链表相关问题\ndate: 2014-03-14\nlayout: post\ndescription: 单链表的常用操作实现:删除、增加、反转、环形...\ntags:\n  - 数据结构\n  - tech\n---\n\n下面是对单链表的一些总结：\n\n定义情况如下：\n\n```c\n#define TRUE 1\n#define FALSE 0\ntypedef int bool;\ntypedef struct node {\n        struct node * next;\n        int value;\n} Node;\n```\n\n# 1. 针对一个单链表的常用操作\n\n\n##（1）给点一个值value，删除链表中等于此值的节点\n\n\n        先判断头节点的值是否为value，是的话，改变头指针，指向下一个节点；\n        否则，遍历链表，知道找到一个节点，他的next的值为value，\n        将此节点指向下下个节点，最后删除中间的节点。\n        程序如下：\n\n\n```c  \nvoid removeNode ( Node ** head, int value){\n    if ( head == NULL || *head == NULL )\n        return;\n    Node * deleteNode = NULL;\n    if ( (*head)->value == value){ /* if *head is the node to be deleted */\n        deleteNode = *head;\n        *head = (*head)->next;\n    }else{\n        while ( (*head)->next != NULL && (*head)->next->value != value ){\n                (*head) = (*head)->next;\n        }\n \n        if ( (*head)->next != NULL && (*head)->next->value == value){ /* ensure we 've found the node to be deleted */\n            deleteNode = (*head)->next;\n            (*head)->next = (*head)->next->next;\n        }\n    }\n    if ( deleteNode != NULL ){ /* free the node and set it to NULL in case of stray pointer */\n        free(deleteNode);\n        deleteNode = NULL;\n    }\n \n}\n```\n\n \n##（2）在链表尾部新增一个节点，其值为value：\n\n\n    先分配空间，初始化新的节点；如果链表为空，则头部指向新节点；\n    否则，在尾部直接添加新节点即可；\n    程序如下：\n\n```c   \nvoid addNodeToTail ( Node ** head, int value){\n    Node * newNode = (Node *) malloc(sizeof(Node));\n    newNode->next = NULL;\n    newNode->value = value;\n \n    if (*head==NULL){\n        *head = newNode;\n    }else{\n        while ( (*head)->next != NULL )\n            *head = (*head)->next;\n        (*head)->next = newNode;\n    }\n}\n```\n\n##（3）打印一个单链表，但是输出的顺序反向：\n\n\n    可以利用递归，知道最后一个节点（next=NULL）时才打印；\n    然后从栈中返回前面调用的函数，实现了反向打印。\n    程序如下：\n\n```c \nvoid printListReversely ( Node * head ){\n    if ( head == NULL )\n        return;\n    if ( head->next != NULL )\n        printListReversely (head->next);\n    printf(\"%d\\t\",head->next);\n}\n```\n\n##（4）翻转一个单链表，即把原来的链表反向：\n\n\n   只需改变链表中每一个箭头的方向即可；\n   需要3个变量，一个保存现在的节点，一个保存前一个节点，一个保存下一个节点。\n   程序如下：\n\n```c\nNode *  reverseLinkList ( Node * pHead ){\n    if (pHead==NULL)\n        return NULL;\n    Node * pPre =NULL;\n    Node * pCur = pHead;\n    Node * pNext = NULL;\n    while ( pCur != NULL ){\n        pNext = pCur->next;\n        pCur->next = pPre;\n        pPre = pCur;\n        pCur = pNext;\n    }\n    return pCur; /* pCur is the last node b4; and it's the head of the new node now */\n}\n```\n\n##(5) 判断一个链表是否有环\n\n\n   如果链表有环，必定出现在尾部；就像去操场前，需要先走一段路，再进入圆形的跑道；\n   可以设定两个指针，开始都指向head，然后一个指针每次走2步，另外一个每次一步；\n   如果有环，经过圆形环后，快指针必定会追上慢指针；\n   如果碰到指针指向NULL了，则没有环。\n\n   程序如下：\n\n```c\nbool isLoopInList (Node * head){\n    Node * slow = head;\n    Node * fast = head;\n    while ( fast != NULL && fast->next != NULL ){\n        slow = slow->next;\n        fast = fast->next->next;\n        if ( slow == fast)\n            return TRUE;\n    }\n    if ( fast==NULL || fast->next == NULL )\n        return FALSE;\n \n \n}\n```\n\n##（6）如果一个链表有环，请找出进入环的第一个节点\n\n\n 用步骤（5）的方法判断有环时，快慢指针相遇，然后将慢指针重新置为head，\n 快指针停留在相遇的节点；\n 这时候，都同时走，每次一步，再次相遇时，必定在进环的第一个节点。\n （可以按照圆环的路径证明）\n  程序如下：\n \n```c\nNode * fistNodeOfLoop(Node * head){\n    Node * slow = head;\n    Node * fast = head;\n    while ( fast != NULL && fast->next != NULL ){\n        slow = slow->next;\n        fast = fast->next->next;\n        if ( slow == fast)\n            break;\n    }\n    slow = head;\n    while ( slow != fast ){\n        slow = slow->next;\n        fast = fast->next;\n    }\n    return slow;\n \n}\n```\n\n##（7） 打印链表的倒数第K个节点\n\n\n设定2个指针，先让一个走k-1步，然后一起走，每次一步；\n当前面的指针走到尾时，后的指针刚好走到倒数第K个节点。\n程序如下：\n\n```c\nNode * FindLastKNode ( Node * head, unsigned int k ){\n    if ( head == NULL || k ==0 )\n        return NULL;\n \n    Node * fast = head;\n    Node * slow = head;\n    int i=1;\n    for (;i<k;i++){\n if="" (fast-="">next!=NULL)\n            fast = fast->next;\n        else /* k might be larger than the length of list */\n            return NULL;\n    }\n \n \n    while (fast->next!=NULL){\n        fast = fast->next;\n        slow = slow->next;\n    }\n    return slow;\n}\n```\n \n#2. 以上都是针对一个单链表的操作，下面讨论两个单链表，\n现在讨论两个单链表的相交情况\n\n\n##（1）判断给定的2个单链表是否相交\n\n\n 由节点指向的单一性，相交后不会再分开；即相交后的形状如Y，不是X；\n可以分别遍历2个链表，只需判断最后一个节点是否一致，一致则相交，不一致则不相交；\n时间复杂度为 O(m+n)\n\n\n```c\nbool HasCommonNodeOf2Lists ( Node * p1,Node * p2 ){\n        while ( p1->next != NULL )\n            p1 = p1->next;\n        while ( p2->next != NULL )\n            p2 = p2->next;\n \n        return (p1==p2)? TRUE : FALSE;\n \n}\n```\n\n##(2) 如果两个链表相交，找出第一个相交的节点\n\n\n两个链表可能有长有短，可以分别遍历2个链表，计算出长度差diff；\n然后，在长链表上先走diff步，再同时走，直到节点相等时停止，\n这个节点即为第一个相交的节点。\n程序如下：\n\n\n```c\nNode *  firstCommonNodeOf2Lists ( Node * head1,Node * head2 ){\n        if (head1==NULL || head2==NULL)\n            return NULL;\n        int len1 = 0;\n        int len2 = 0;\n        Node * p1 = head1;\n        Node * p2 = head2;\n        while ( p1->next != NULL ){\n             p1 = p1->next;\n             len1++;\n        }\n \n        while ( p2->next != NULL ){\n             p2 = p2->next;\n             len2++;\n        }\n        int diff = len1 - len2;\n        Node * fast = head1;\n        Node * slow = head2;\n        if ( len1<len2 )\n="" diff="len2" -="" len1;\n="" fast="head2;\n" slow="head1;\n" \n="" int="" i="1;\n" for="" (;i<="diff;i++)\n">next;\n \n        while ( fast != slow ){\n            fast = fast->next;\n            slow = slow->next;\n        }\n        return slow;\n}\n```\n","slug":"2014-03-14-single-linked-list-problems","published":1,"updated":"2015-06-09T13:51:16.000Z","_id":"ciapcagjr001b6ufv5qk8bedj","comments":1,"photos":[],"link":""},{"title":"从1打印到最大的N位数","date":"2014-03-14T15:10:00.000Z","layout":"post","description":"从1打印到最大的N位数, 当N=3时，即打印1,2,3,4...999。...","_content":"\n\n###Problem: 从1打印到最大的N位数, 当N=3时，即打印1,2,3,4...999\n\n可以用一个循环，循环999次，依次打印；但是，如果变量定义为int类型时，32位的机子上，最大的unsigned数是2^32 -1, 最大的signed数是 2^31 -1 （更小，有一半为负数），这时，当最大的数超过2^32 -1时，就会溢出。\n \n解决的办法是，申请一个长度为N+1的字符串，最后一位是结束符'\\0'。初始化字符串的每一位都为0；然后循环打印，每次将字符串所代表的数字加1；直到最高位有进位时(999+1, 代表到达最大的N位数)，停止；\n \n具体程序如下：\n\n```c\nvoid Print1ToMaxOfNDigits ( int n);\nbool increament (char * num, int n);\nvoid PrintNum (char * num);\n \nint main(){\n      Print1ToMaxOfNDigits(3);\n    system(\"pause\");\n    return 0;\n}\n \nvoid Print1ToMaxOfNDigits ( int n){\n    if (n<0)\n return;\n="" char="" num[n+1];\n="" int="" index="0;\n" for="" (;index="" <="" n;index++)\n="" num[index]="0" ;\n="" num[n]="\\0" \n="" *="" 如果最高位，没有进位，继续打印并加1="" while="" (!increament(num,n)){="" printnum="" (num);\n="" }\n}\n="" *将字符串所代表的数加1,="" 如最高位有进位，则返回true，否则false*="" \nbool="" increament="" (char="" num,="" n){\n="" takeover="0;" 进位标志="" bool="" overflow="false;\n" index;\n="" (index="n-1;index">=0;index--){\n        int sum = num[index] - '0' + takeOver;\n        if (index==n-1)\n            sum++;\n        if (sum>=10){\n            sum -=10;\n            takeOver =1;\n            num[index]= sum + '0';\n            if (index == 0)\n                overFlow = true;\n        }else{\n            num[index]= sum + '0';\n            break;    /* 没有进位时，终止本次函数的调用 */\n        }\n \n    }\n    return overFlow;\n}\n \n/* 打印时，去掉最前面的0，如009变成9 */\nvoid PrintNum (char * num){\n    while ( *num!='\\0' && *num =='0' )\n        num++;\n    printf (\"%s,\",num);\n}\n```\n\n\nAt 23:10\n","source":"_posts/2014-03-14-print-from-one-to-n-bit.md","raw":"---\ntitle: 从1打印到最大的N位数\ndate: 2014-03-14\nlayout: post\ndescription: 从1打印到最大的N位数, 当N=3时，即打印1,2,3,4...999。...\ntags: [C,算法,tech]\ndate: 2014-03-14 23:10\n---\n\n\n###Problem: 从1打印到最大的N位数, 当N=3时，即打印1,2,3,4...999\n\n可以用一个循环，循环999次，依次打印；但是，如果变量定义为int类型时，32位的机子上，最大的unsigned数是2^32 -1, 最大的signed数是 2^31 -1 （更小，有一半为负数），这时，当最大的数超过2^32 -1时，就会溢出。\n \n解决的办法是，申请一个长度为N+1的字符串，最后一位是结束符'\\0'。初始化字符串的每一位都为0；然后循环打印，每次将字符串所代表的数字加1；直到最高位有进位时(999+1, 代表到达最大的N位数)，停止；\n \n具体程序如下：\n\n```c\nvoid Print1ToMaxOfNDigits ( int n);\nbool increament (char * num, int n);\nvoid PrintNum (char * num);\n \nint main(){\n      Print1ToMaxOfNDigits(3);\n    system(\"pause\");\n    return 0;\n}\n \nvoid Print1ToMaxOfNDigits ( int n){\n    if (n<0)\n return;\n="" char="" num[n+1];\n="" int="" index="0;\n" for="" (;index="" <="" n;index++)\n="" num[index]="0" ;\n="" num[n]="\\0" \n="" *="" 如果最高位，没有进位，继续打印并加1="" while="" (!increament(num,n)){="" printnum="" (num);\n="" }\n}\n="" *将字符串所代表的数加1,="" 如最高位有进位，则返回true，否则false*="" \nbool="" increament="" (char="" num,="" n){\n="" takeover="0;" 进位标志="" bool="" overflow="false;\n" index;\n="" (index="n-1;index">=0;index--){\n        int sum = num[index] - '0' + takeOver;\n        if (index==n-1)\n            sum++;\n        if (sum>=10){\n            sum -=10;\n            takeOver =1;\n            num[index]= sum + '0';\n            if (index == 0)\n                overFlow = true;\n        }else{\n            num[index]= sum + '0';\n            break;    /* 没有进位时，终止本次函数的调用 */\n        }\n \n    }\n    return overFlow;\n}\n \n/* 打印时，去掉最前面的0，如009变成9 */\nvoid PrintNum (char * num){\n    while ( *num!='\\0' && *num =='0' )\n        num++;\n    printf (\"%s,\",num);\n}\n```\n\n\nAt 23:10\n","slug":"2014-03-14-print-from-one-to-n-bit","published":1,"updated":"2015-06-09T13:51:06.000Z","_id":"ciapcagju001f6ufviznzeyn7","comments":1,"photos":[],"link":""},{"title":"iOS图片的旋转动画效果","date":"2015-09-13T16:00:00.000Z","layout":"post","description":"本文实现了:根据当前时间, 旋转时钟的3指针(图片),显示当前时间.","_content":"\n\n### 目的\n> 根据当前时间, 实现钟表的时分秒3根指针的移动\n\n### 界面\n![Alt text](/media/1442160050001.png)\n\n### 物体移动的计算方法\n**旋转矩阵M**\n> 把物体从A点(x,y)移动到B点(x1,y1)的计算方法如下:\n> 矩阵B = 矩阵A * 移动矩阵M\n> 对于顺时针旋转, M等于\n> ![Alt text](/media/1442160401385.png)\n> 在ios中,  顺时针旋转的矩阵M无需自己计算, 可由下面的方法得出:\n> `CGAffineTransform matrix = CGAffineTransformMakeRotation(angle*M_PI/180);`\n> 即CGAffineTransformMakeRotation输入的参数为要顺时针旋转的弧度,输出为旋转的矩阵M\n\n**anchorPoint**\n\n> **anchorPoint**为旋转点, 即以anchorPoint为中心, 对物体进行整体旋转.\n> ![Alt text](/media/1442160889138.png)\n> 上图中, 中心的anchorPoint为 (0.5,0.5),左上角为(0,0); 右下角为(1,1)\n\n### 实现代码\n\n-  输入三根指针的任意一根和旋转的角度,即可旋转\n```Objective-C\n- (void) moveHand :(UIView *)hand toAngle:(CGFloat) angle{\n    [[hand layer] setAnchorPoint:CGPointMake(0.4f, 0.75f)];\n    [[hand layer] setPosition:CGPointMake(160.0f, 170.0f)]; // 重新将指针置于表盘中间\n    [UIView animateWithDuration:0.5 animations:^{\n        CGAffineTransform matrix =  CGAffineTransformMakeRotation(angle*M_PI/180);\n        [[hand layer] setAffineTransform:matrix]; //实现转动\n    }];\n\n}\n```\nanchorPoint点得位置\n![Alt text](/media/1442161266216.png)\n\n- 根据当前的时间,移动指针\n```Objective-C\n- (void) moveHandToLocalTime{\n\t//获取当前的时间\n    NSCalendar *calendar = [NSCalendar currentCalendar];\n    NSInteger comp = (NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond);\n    NSDateComponents *components = [calendar components:comp fromDate:[NSDate date]];\n    \n    [self moveHand:self.hoursHand toAngle:[components hour] * 360.0f / 24.0f]; \n    //24h制度,12h旋转一圈, x h旋转 (x/2 /12)*360\n    [self moveHand:self.minutesHand toAngle:[components minute] * 360.0f / 60.0f]; \n    // 60min旋转一圈, x min旋转 (x/60)*360\n    [self moveHand:self.secondsHand toAngle:[components second] * 360.0f / 60.0f];\n    \n}\n```\n\n - 当view移动到window上时, 触发Timer, 间隔为1s,重复执行\n```\n- (void) didMoveToWindow{\n    [NSTimer scheduledTimerWithTimeInterval:1.0\n                                     target:self                                                                   selector:@selector(moveHandToLocalTime)\n                                   userInfo:nil\n                                    repeats:YES];\n    [self oscillatePendulum];\n    \n\n}\n```\n\n### 对于钟摆的移动, 可分为四个阶段:\n\n![Alt text](/media/1442162089697.png)\n> 1. 摆向15°减速\n> 2. 摆向0° 加速\n> 3. -摆向15°减速\n> 4. 摆向0°加速\n\n```\n- (void)oscillatePendulum\n{\n    [[self.pendulum layer] setAnchorPoint:CGPointMake(0.5f, 0.0f)];\n    [[self.pendulum layer] setPosition:CGPointMake(0.0f, 0.0f)];\n    \n    CAKeyframeAnimation *animation = [CAKeyframeAnimation animationWithKeyPath:@\"transform.rotation.z\"];\n    animation.duration = 1.5f;\n    animation.repeatCount = INT64_MAX;\n    animation.values = @[@(0.0f * M_PI / 180.0f), @(15.0f * M_PI / 180.0f),\n                         @(0.0f * M_PI / 180.0f), @(-15.0f * M_PI / 180.0f),\n                         @(0.0f * M_PI / 180.0f)];\n    \n    animation.keyTimes = @[@(0.0f), @(0.26f), @(0.50f), @(0.74f), @(1.0f)];\n    animation.timingFunctions = @[\n                                  [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut],\n                                  [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn],\n                                  [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut],\n                                  [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn],\n                                  ];\n    \n    [[self.pendulum layer] addAnimation:animation forKey:nil];\n}\n```\n\n\n\n\n","source":"_posts/ios 图片的旋转动画效果.md","raw":"---\ntitle: \"iOS图片的旋转动画效果\"\ndate: 2015-09-14\nlayout: post\ndescription: \"本文实现了:根据当前时间, 旋转时钟的3指针(图片),显示当前时间.\"\ntags: [iOS入门,CGAffineTransform,anchorPoint,Object C]\n---\n\n\n### 目的\n> 根据当前时间, 实现钟表的时分秒3根指针的移动\n\n### 界面\n![Alt text](/media/1442160050001.png)\n\n### 物体移动的计算方法\n**旋转矩阵M**\n> 把物体从A点(x,y)移动到B点(x1,y1)的计算方法如下:\n> 矩阵B = 矩阵A * 移动矩阵M\n> 对于顺时针旋转, M等于\n> ![Alt text](/media/1442160401385.png)\n> 在ios中,  顺时针旋转的矩阵M无需自己计算, 可由下面的方法得出:\n> `CGAffineTransform matrix = CGAffineTransformMakeRotation(angle*M_PI/180);`\n> 即CGAffineTransformMakeRotation输入的参数为要顺时针旋转的弧度,输出为旋转的矩阵M\n\n**anchorPoint**\n\n> **anchorPoint**为旋转点, 即以anchorPoint为中心, 对物体进行整体旋转.\n> ![Alt text](/media/1442160889138.png)\n> 上图中, 中心的anchorPoint为 (0.5,0.5),左上角为(0,0); 右下角为(1,1)\n\n### 实现代码\n\n-  输入三根指针的任意一根和旋转的角度,即可旋转\n```Objective-C\n- (void) moveHand :(UIView *)hand toAngle:(CGFloat) angle{\n    [[hand layer] setAnchorPoint:CGPointMake(0.4f, 0.75f)];\n    [[hand layer] setPosition:CGPointMake(160.0f, 170.0f)]; // 重新将指针置于表盘中间\n    [UIView animateWithDuration:0.5 animations:^{\n        CGAffineTransform matrix =  CGAffineTransformMakeRotation(angle*M_PI/180);\n        [[hand layer] setAffineTransform:matrix]; //实现转动\n    }];\n\n}\n```\nanchorPoint点得位置\n![Alt text](/media/1442161266216.png)\n\n- 根据当前的时间,移动指针\n```Objective-C\n- (void) moveHandToLocalTime{\n\t//获取当前的时间\n    NSCalendar *calendar = [NSCalendar currentCalendar];\n    NSInteger comp = (NSCalendarUnitHour | NSCalendarUnitMinute | NSCalendarUnitSecond);\n    NSDateComponents *components = [calendar components:comp fromDate:[NSDate date]];\n    \n    [self moveHand:self.hoursHand toAngle:[components hour] * 360.0f / 24.0f]; \n    //24h制度,12h旋转一圈, x h旋转 (x/2 /12)*360\n    [self moveHand:self.minutesHand toAngle:[components minute] * 360.0f / 60.0f]; \n    // 60min旋转一圈, x min旋转 (x/60)*360\n    [self moveHand:self.secondsHand toAngle:[components second] * 360.0f / 60.0f];\n    \n}\n```\n\n - 当view移动到window上时, 触发Timer, 间隔为1s,重复执行\n```\n- (void) didMoveToWindow{\n    [NSTimer scheduledTimerWithTimeInterval:1.0\n                                     target:self                                                                   selector:@selector(moveHandToLocalTime)\n                                   userInfo:nil\n                                    repeats:YES];\n    [self oscillatePendulum];\n    \n\n}\n```\n\n### 对于钟摆的移动, 可分为四个阶段:\n\n![Alt text](/media/1442162089697.png)\n> 1. 摆向15°减速\n> 2. 摆向0° 加速\n> 3. -摆向15°减速\n> 4. 摆向0°加速\n\n```\n- (void)oscillatePendulum\n{\n    [[self.pendulum layer] setAnchorPoint:CGPointMake(0.5f, 0.0f)];\n    [[self.pendulum layer] setPosition:CGPointMake(0.0f, 0.0f)];\n    \n    CAKeyframeAnimation *animation = [CAKeyframeAnimation animationWithKeyPath:@\"transform.rotation.z\"];\n    animation.duration = 1.5f;\n    animation.repeatCount = INT64_MAX;\n    animation.values = @[@(0.0f * M_PI / 180.0f), @(15.0f * M_PI / 180.0f),\n                         @(0.0f * M_PI / 180.0f), @(-15.0f * M_PI / 180.0f),\n                         @(0.0f * M_PI / 180.0f)];\n    \n    animation.keyTimes = @[@(0.0f), @(0.26f), @(0.50f), @(0.74f), @(1.0f)];\n    animation.timingFunctions = @[\n                                  [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut],\n                                  [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn],\n                                  [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseOut],\n                                  [CAMediaTimingFunction functionWithName:kCAMediaTimingFunctionEaseIn],\n                                  ];\n    \n    [[self.pendulum layer] addAnimation:animation forKey:nil];\n}\n```\n\n\n\n\n","slug":"ios 图片的旋转动画效果","published":1,"updated":"2015-09-13T18:03:41.000Z","_id":"cieiqnv2k0000w8fvyiuijq2p","comments":1,"photos":[],"link":""}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ciapcaggd00006ufvf2misam9","tag_id":"ciapcaggi00016ufv1ypf0ip6","_id":"ciapcaggk00046ufv8rtnysy4"},{"post_id":"ciapcaggd00006ufvf2misam9","tag_id":"ciapcaggj00026ufvi4vi3epf","_id":"ciapcaggl00056ufvsfb1ae2k"},{"post_id":"ciapcaggd00006ufvf2misam9","tag_id":"ciapcaggk00036ufv8q8qjchn","_id":"ciapcaggl00066ufv68mn8nur"},{"post_id":"ciapcagil00086ufvpemangjw","tag_id":"ciapcagim00096ufvxdgaugga","_id":"ciapcagin000d6ufvgttnv1vl"},{"post_id":"ciapcagil00086ufvpemangjw","tag_id":"ciapcagin000a6ufvnahnd7y8","_id":"ciapcagin000e6ufvhgncrsfu"},{"post_id":"ciapcagil00086ufvpemangjw","tag_id":"ciapcagin000b6ufvmtq72imq","_id":"ciapcagin000f6ufvu0smrwq4"},{"post_id":"ciapcagil00086ufvpemangjw","tag_id":"ciapcagin000c6ufv0ycuc45s","_id":"ciapcagin000g6ufv5now3nzq"},{"post_id":"ciapcagiq000h6ufvwwu7haz3","tag_id":"ciapcagim00096ufvxdgaugga","_id":"ciapcagir000j6ufvqh3kfyh1"},{"post_id":"ciapcagiq000h6ufvwwu7haz3","tag_id":"ciapcagir000i6ufvri0kw4r6","_id":"ciapcagir000k6ufvrbuqw08o"},{"post_id":"ciapcagiq000h6ufvwwu7haz3","tag_id":"ciapcagin000c6ufv0ycuc45s","_id":"ciapcagir000l6ufv5ua8zckt"},{"post_id":"ciapcagji000m6ufvn03k0tb0","tag_id":"ciapcagji000n6ufv46q0x829","_id":"ciapcagjj000q6ufvuez0hnkp"},{"post_id":"ciapcagji000m6ufvn03k0tb0","tag_id":"ciapcagjj000o6ufvuu8tzhx0","_id":"ciapcagjj000r6ufvcsjtnyf2"},{"post_id":"ciapcagji000m6ufvn03k0tb0","tag_id":"ciapcagjj000p6ufv452v1roq","_id":"ciapcagjj000s6ufvlv1n3ghd"},{"post_id":"ciapcagjk000t6ufv34b9gtte","tag_id":"ciapcagjl000u6ufvii82fdj0","_id":"ciapcagjm000z6ufv1dj7c9g6"},{"post_id":"ciapcagjk000t6ufv34b9gtte","tag_id":"ciapcagjl000v6ufvf866u5cm","_id":"ciapcagjm00106ufv71eenxu0"},{"post_id":"ciapcagjk000t6ufv34b9gtte","tag_id":"ciapcagjl000w6ufvt2fi745s","_id":"ciapcagjm00116ufvh5yp5gyu"},{"post_id":"ciapcagjk000t6ufv34b9gtte","tag_id":"ciapcagjl000x6ufvtwbslmsp","_id":"ciapcagjm00126ufv7v7z2u2w"},{"post_id":"ciapcagjk000t6ufv34b9gtte","tag_id":"ciapcagjm000y6ufvvesgle5k","_id":"ciapcagjm00136ufvcl649qmv"},{"post_id":"ciapcagjo00146ufvn75b32v7","tag_id":"ciapcagjp00156ufv9kzs3tbp","_id":"ciapcagjq00186ufvw6xdauv9"},{"post_id":"ciapcagjo00146ufvn75b32v7","tag_id":"ciapcagjq00166ufv869sxfaz","_id":"ciapcagjq00196ufv7at2dh1y"},{"post_id":"ciapcagjo00146ufvn75b32v7","tag_id":"ciapcagjq00176ufvxqgke0jf","_id":"ciapcagjq001a6ufv1q7b06za"},{"post_id":"ciapcagjr001b6ufv5qk8bedj","tag_id":"ciapcagjs001c6ufvx1zybafo","_id":"ciapcagjt001d6ufvn6ens4a2"},{"post_id":"ciapcagjr001b6ufv5qk8bedj","tag_id":"ciapcagjq00176ufvxqgke0jf","_id":"ciapcagjt001e6ufvm4vmpc1p"},{"post_id":"ciapcagju001f6ufviznzeyn7","tag_id":"ciapcagjv001g6ufvr1jec2kj","_id":"ciapcagjv001h6ufvd38t6qg6"},{"post_id":"ciapcagju001f6ufviznzeyn7","tag_id":"ciapcagjm000y6ufvvesgle5k","_id":"ciapcagjv001i6ufvhcfs6zl8"},{"post_id":"ciapcagju001f6ufviznzeyn7","tag_id":"ciapcagjq00176ufvxqgke0jf","_id":"ciapcagjv001j6ufvbxhnjtio"},{"post_id":"cieiqnv2k0000w8fvyiuijq2p","tag_id":"ciapcagim00096ufvxdgaugga","_id":"cieiqnv2t0003w8fv3dsydgjz"},{"post_id":"cieiqnv2k0000w8fvyiuijq2p","tag_id":"cieiqnv2o0001w8fvzu4h29z9","_id":"cieiqnv2t0004w8fvrnn01r62"},{"post_id":"cieiqnv2k0000w8fvyiuijq2p","tag_id":"cieiqnv2r0002w8fv035pcmf9","_id":"cieiqnv2t0005w8fvrzrjvkql"},{"post_id":"cieiqnv2k0000w8fvyiuijq2p","tag_id":"ciapcagin000c6ufv0ycuc45s","_id":"cieiqnv2t0006w8fvki25iav4"}],"Tag":[{"name":"github","_id":"ciapcaggi00016ufv1ypf0ip6"},{"name":"pages","_id":"ciapcaggj00026ufvi4vi3epf"},{"name":"life","_id":"ciapcaggk00036ufv8q8qjchn"},{"name":"iOS入门","_id":"ciapcagim00096ufvxdgaugga"},{"name":"NSCoding","_id":"ciapcagin000a6ufvnahnd7y8"},{"name":"应用状态","_id":"ciapcagin000b6ufvmtq72imq"},{"name":"Object C","_id":"ciapcagin000c6ufv0ycuc45s"},{"name":"webView","_id":"ciapcagir000i6ufvri0kw4r6"},{"name":"输入验证","_id":"ciapcagji000n6ufv46q0x829"},{"name":"Shell","_id":"ciapcagjj000o6ufvuu8tzhx0"},{"name":"Wicked Cool Shell Scripts","_id":"ciapcagjj000p6ufv452v1roq"},{"name":"可变字节码","_id":"ciapcagjl000u6ufvii82fdj0"},{"name":"Variable Byte Code","_id":"ciapcagjl000v6ufvf866u5cm"},{"name":"Perl","_id":"ciapcagjl000w6ufvt2fi745s"},{"name":"压缩","_id":"ciapcagjl000x6ufvtwbslmsp"},{"name":"算法","_id":"ciapcagjm000y6ufvvesgle5k"},{"name":"ubuntu","_id":"ciapcagjp00156ufv9kzs3tbp"},{"name":"vmware","_id":"ciapcagjq00166ufv869sxfaz"},{"name":"tech","_id":"ciapcagjq00176ufvxqgke0jf"},{"name":"数据结构","_id":"ciapcagjs001c6ufvx1zybafo"},{"name":"C","_id":"ciapcagjv001g6ufvr1jec2kj"},{"name":"CGAffineTransform","_id":"cieiqnv2o0001w8fvzu4h29z9"},{"name":"anchorPoint","_id":"cieiqnv2r0002w8fv035pcmf9"}]}}</0)\n></0)\n></len2></k;i++){\n></len2></k;i++){\n></nscoding></nscoding>